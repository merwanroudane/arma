import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from scipy import stats
from statsmodels.tsa.stattools import adfuller, kpss, acf, pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import matplotlib.pyplot as plt
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.tsa.arima_process import ArmaProcess
from statsmodels.tsa.api import SARIMAX
import warnings

warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(page_title="√âconom√©trie de la Finance", layout="wide", initial_sidebar_state="expanded")

# Style CSS personnalis√©
st.markdown("""
    <style>
    .main-header {
        font-size: 40px;
        color: #1f77b4;
        text-align: center;
        font-weight: bold;
        margin-bottom: 30px;
    }
    .sub-header {
        font-size: 2em;
        color: #1f77b4;
        font-weight: bold;
        text-align: center;
        margin: 20px 0;
    }
    .theory-box {
        background-color: #e8f4f8;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 10px 0;
    }
    .formula-box {
        background-color: #f0f0f0;
        border: 2px solid #333;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .example-box {
        background-color: #d4edda;
        padding: 15px;
        border-radius: 10px;
        border-left: 5px solid #28a745;
        margin: 10px 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border-left: 6px solid #ff9800;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .info-box {
        background-color: #e7f3fe;
        border-left: 6px solid #2196F3;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .success-box {
        background-color: #d4edda;
        border-left: 6px solid #28a745;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .error-box {
        background-color: #f8d7da;
        border-left: 6px solid #dc3545;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    </style>
    """, unsafe_allow_html=True)

# Titre principal
st.markdown('<p class="main-header">üìä √âconom√©trie de la Finance</p>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 20px; color: #666;">Application Interactive pour D√©butants</p>',
            unsafe_allow_html=True)

# Barre lat√©rale pour la navigation
st.sidebar.title("üéØ Navigation")
chapitre = st.sidebar.radio(
    "Choisissez un chapitre:",
    ["üè† Accueil", "üìà Chapitre 1: Processus Stationnaires & ARMA", "üîç Chapitre 2: Tests de Stationnarit√©"],
    index=0
)

# ==================== PAGE D'ACCUEIL ====================
# === NEW: ADDING ATTRIBUTION TO THE SIDEBAR ===
st.sidebar.markdown("---")
st.sidebar.info("This app is created by **Dr. Hocine Belhimer**.")
if chapitre == "üè† Accueil":
    st.markdown('<p class="sub-header" style="text-align: left;">Bienvenue dans ce cours interactif!</p>',
                unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        <div class="theory-box">
        <h3>üìö Objectifs du cours</h3>
        <ul>
            <li>Comprendre les s√©ries temporelles financi√®res</li>
            <li>Ma√Ætriser les concepts de stationnarit√©</li>
            <li>Apprendre les processus ARMA</li>
            <li>Effectuer des tests de stationnarit√©</li>
            <li>Mod√©liser des donn√©es r√©elles</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="example-box">
        <h3>üéì Pour qui?</h3>
        <ul>
            <li>‚úÖ D√©butants en √©conom√©trie</li>
            <li>‚úÖ √âtudiants en finance</li>
            <li>‚úÖ Analystes financiers</li>
            <li>‚úÖ Data scientists</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("""
    <div class="formula-box">
    <h3>üìñ Contenu des chapitres</h3>
    <p><strong>Chapitre 1:</strong> Introduction aux probabilit√©s, s√©ries temporelles, processus stationnaires, th√©or√®me de Wold, processus ARMA</p>
    <p><strong>Chapitre 2:</strong> Tests de stationnarit√© (Dickey-Fuller, ADF), processus ARIMA</p>
    </div>
    """, unsafe_allow_html=True)

# ==================== CHAPITRE 1 ====================
elif chapitre == "üìà Chapitre 1: Processus Stationnaires & ARMA":

    st.sidebar.markdown("---")
    section = st.sidebar.selectbox(
        "Choisissez une section:",
        ["1.1 - Rappel de probabilit√© et statistiques",
         "1.2 - S√©ries temporelles",
         "1.3 - Processus stationnaires",
         "1.4 - Th√©or√®me de Wold",
         "1.5 - Processus ARMA"]
    )

    # ========== SECTION 1.1 ==========
    if section == "1.1 - Rappel de probabilit√© et statistiques":
        st.markdown('<p class="sub-header">1.1 - Rappel de Probabilit√© et Statistiques</p>', unsafe_allow_html=True)

        tab1, tab2, tab3, tab4 = st.tabs(["üìä Th√©orie", "üé≤ Variables Al√©atoires", "üìà Loi Normale", "üßÆ Simulations"])

        with tab1:
            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Concepts Fondamentaux</h3>
            <p>Les probabilit√©s et statistiques sont la base de l'√©conom√©trie financi√®re.</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìå Variable Al√©atoire")
                st.markdown("""
                Une **variable al√©atoire** X est une fonction qui associe un nombre r√©el √† chaque r√©sultat d'une exp√©rience al√©atoire.

                **Types:**
                - **Discr√®te**: Prend des valeurs d√©nombrables (ex: nombre de transactions)
                - **Continue**: Prend toutes les valeurs dans un intervalle (ex: prix d'une action)
                """)

                st.markdown("### üìê Esp√©rance Math√©matique")
                st.latex(r"E[X] = \mu = \int_{-\infty}^{+\infty} x \cdot f(x) dx")
                st.markdown("L'esp√©rance repr√©sente la **valeur moyenne** attendue.")

            with col2:
                st.markdown("### üìä Variance")
                st.latex(r"Var(X) = \sigma^2 = E[(X - \mu)^2]")
                st.markdown("La variance mesure la **dispersion** autour de la moyenne.")

                st.markdown("### üìè √âcart-type")
                st.latex(r"\sigma = \sqrt{Var(X)}")
                st.markdown("L'√©cart-type est dans la **m√™me unit√©** que X.")

        with tab2:
            st.markdown("### üé≤ Simulation de Variables Al√©atoires")

            col1, col2 = st.columns([1, 2])

            with col1:
                distribution = st.selectbox(
                    "Choisissez une distribution:",
                    ["Normale", "Uniforme", "Exponentielle", "Binomiale"]
                )

                n_samples = st.slider("Nombre d'√©chantillons:", 100, 10000, 1000)

                if distribution == "Normale":
                    mu = st.slider("Moyenne (Œº):", -10.0, 10.0, 0.0, 0.1)
                    sigma = st.slider("√âcart-type (œÉ):", 0.1, 5.0, 1.0, 0.1)
                    data = np.random.normal(mu, sigma, n_samples)

                elif distribution == "Uniforme":
                    a = st.slider("Borne inf√©rieure (a):", -10.0, 0.0, 0.0, 0.1)
                    b = st.slider("Borne sup√©rieure (b):", 0.0, 10.0, 1.0, 0.1)
                    data = np.random.uniform(a, b, n_samples)

                elif distribution == "Exponentielle":
                    lambda_param = st.slider("Param√®tre Œª:", 0.1, 5.0, 1.0, 0.1)
                    data = np.random.exponential(1 / lambda_param, n_samples)

                else:  # Binomiale
                    n = st.slider("Nombre d'essais (n):", 1, 100, 10)
                    p = st.slider("Probabilit√© de succ√®s (p):", 0.0, 1.0, 0.5, 0.01)
                    data = np.random.binomial(n, p, n_samples)

            with col2:
                # Histogramme
                fig = go.Figure()
                fig.add_trace(go.Histogram(
                    x=data,
                    nbinsx=50,
                    name='Histogramme',
                    marker_color='lightblue',
                    opacity=0.7
                ))

                fig.update_layout(
                    title=f'Distribution {distribution}',
                    xaxis_title='Valeur',
                    yaxis_title='Fr√©quence',
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)

                # Statistiques
                st.markdown("### üìä Statistiques calcul√©es:")
                col_a, col_b, col_c = st.columns(3)
                col_a.metric("Moyenne empirique", f"{np.mean(data):.3f}")
                col_b.metric("Variance empirique", f"{np.var(data):.3f}")
                col_c.metric("√âcart-type empirique", f"{np.std(data):.3f}")

        with tab3:
            st.markdown("### üìà La Loi Normale (Gaussienne)")

            st.markdown("""
            <div class="theory-box">
            <h4>üéØ Pourquoi la loi normale est-elle si importante?</h4>
            <ul>
                <li>Nombreux ph√©nom√®nes naturels et financiers suivent cette loi</li>
                <li>Th√©or√®me Central Limite: somme de variables al√©atoires ‚Üí loi normale</li>
                <li>Base de nombreux mod√®les statistiques et financiers</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìê Fonction de densit√©:")
            st.latex(r"f(x) = \frac{1}{\sigma\sqrt{2\pi}} e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}")

            col1, col2 = st.columns(2)

            with col1:
                mu_norm = st.slider("Moyenne Œº:", -5.0, 5.0, 0.0, 0.1, key='mu_norm')
                sigma_norm = st.slider("√âcart-type œÉ:", 0.1, 3.0, 1.0, 0.1, key='sigma_norm')

            x = np.linspace(-10, 10, 1000)
            y = stats.norm.pdf(x, mu_norm, sigma_norm)

            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=x, y=y,
                fill='tozeroy',
                name=f'N({mu_norm}, {sigma_norm}¬≤)',
                line=dict(color='blue', width=3)
            ))

            fig.update_layout(
                title='Fonction de Densit√© de Probabilit√©',
                xaxis_title='x',
                yaxis_title='f(x)',
                height=400
            )

            with col2:
                st.plotly_chart(fig, use_container_width=True)

            st.markdown("""
            <div class="formula-box">
            <h4>üìè R√®gle empirique (68-95-99.7)</h4>
            <ul>
                <li>68% des valeurs sont dans [Œº - œÉ, Œº + œÉ]</li>
                <li>95% des valeurs sont dans [Œº - 2œÉ, Œº + 2œÉ]</li>
                <li>99.7% des valeurs sont dans [Œº - 3œÉ, Œº + 3œÉ]</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

        with tab4:
            st.markdown("### üßÆ Th√©or√®me Central Limite - Simulation Interactive")

            st.markdown("""
            <div class="theory-box">
            <h4>üéØ Th√©or√®me Central Limite (TCL)</h4>
            <p>La somme (ou moyenne) d'un grand nombre de variables al√©atoires ind√©pendantes
            tend vers une distribution normale, quelle que soit leur distribution d'origine.</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns([1, 2])

            with col1:
                dist_origine = st.selectbox(
                    "Distribution d'origine:",
                    ["Uniforme", "Exponentielle", "Binomiale"],
                    key='tcl_dist'
                )

                n_echantillon = st.slider("Taille de l'√©chantillon (n):", 2, 100, 30)
                n_simulations = st.slider("Nombre de simulations:", 100, 5000, 1000)

            # Simulation TCL
            moyennes = []
            for _ in range(n_simulations):
                if dist_origine == "Uniforme":
                    echantillon = np.random.uniform(0, 1, n_echantillon)
                elif dist_origine == "Exponentielle":
                    echantillon = np.random.exponential(1, n_echantillon)
                else:  # Binomiale
                    echantillon = np.random.binomial(10, 0.5, n_echantillon)

                moyennes.append(np.mean(echantillon))

            moyennes = np.array(moyennes)

            with col2:
                fig = make_subplots(rows=1, cols=2,
                                    subplot_titles=['Distribution d\'origine', 'Distribution des moyennes'])

                # Distribution d'origine
                if dist_origine == "Uniforme":
                    sample_orig = np.random.uniform(0, 1, 1000)
                elif dist_origine == "Exponentielle":
                    sample_orig = np.random.exponential(1, 1000)
                else:
                    sample_orig = np.random.binomial(10, 0.5, 1000)

                fig.add_trace(
                    go.Histogram(x=sample_orig, nbinsx=30, name='Original', marker_color='lightcoral'),
                    row=1, col=1
                )

                # Distribution des moyennes
                fig.add_trace(
                    go.Histogram(x=moyennes, nbinsx=30, name='Moyennes', marker_color='lightblue'),
                    row=1, col=2
                )

                # Courbe normale th√©orique
                x_norm = np.linspace(moyennes.min(), moyennes.max(), 100)
                y_norm = stats.norm.pdf(x_norm, moyennes.mean(), moyennes.std())
                y_norm = y_norm * len(moyennes) * (moyennes.max() - moyennes.min()) / 30

                fig.add_trace(
                    go.Scatter(x=x_norm, y=y_norm, name='Loi Normale', line=dict(color='red', width=3)),
                    row=1, col=2
                )

                fig.update_layout(height=400, showlegend=True)
                st.plotly_chart(fig, use_container_width=True)

            st.success(
                f"‚úÖ La distribution des moyennes converge vers une loi normale N({moyennes.mean():.3f}, {moyennes.std():.3f}¬≤)")

    # ========== SECTION 1.2 ==========
    elif section == "1.2 - S√©ries temporelles":
        st.markdown('<p class="sub-header">1.2 - S√©ries Temporelles</p>', unsafe_allow_html=True)

        tab1, tab2, tab3, tab4 = st.tabs(["üìö Th√©orie", "üìà Exemples R√©els", "üé® Composantes", "üîß Simulations"])

        with tab1:
            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Qu'est-ce qu'une S√©rie Temporelle?</h3>
            <p>Une <strong>s√©rie temporelle</strong> est une suite d'observations <strong>ordonn√©es dans le temps</strong>.</p>
            <p>Notation: {X<sub>t</sub>, t = 1, 2, ..., T} ou {X<sub>t</sub>}<sub>t‚àà‚Ñ§</sub></p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                ### üìä Caract√©ristiques

                **1. D√©pendance temporelle**
                - Les observations ne sont pas ind√©pendantes
                - La valeur au temps t d√©pend des valeurs pass√©es

                **2. Ordre important**
                - L'ordre des observations est crucial
                - On ne peut pas permuter les valeurs

                **3. Fr√©quence**
                - Secondes, minutes (trading haute fr√©quence)
                - Heures, jours (prix quotidiens)
                - Mois, trimestres, ann√©es (donn√©es macro)
                """)

            with col2:
                st.markdown("""
                ### üíº Applications en Finance

                - üìà **Prix des actions**: cours quotidiens
                - üí± **Taux de change**: EUR/USD, etc.
                - üìä **Indices boursiers**: CAC 40, S&P 500
                - üí∞ **Taux d'int√©r√™t**: LIBOR, OIS
                - üìâ **Volatilit√©**: VIX, mesures GARCH
                - üè¢ **Donn√©es macro**: PIB, inflation, ch√¥mage
                """)

            st.markdown("### üìê Notation Math√©matique")

            st.latex(r"X_t = \mu + \epsilon_t")
            st.markdown("o√π:")
            st.latex(r"\mu = \text{tendance ou niveau moyen}")
            st.latex(r"\epsilon_t = \text{composante al√©atoire (bruit)}")

        with tab2:
            st.markdown("### üìà Exemples de S√©ries Temporelles Financi√®res")

            type_serie = st.selectbox(
                "Choisissez un type de s√©rie:",
                ["Prix d'action (avec tendance)", "Rendements (stationnaire)",
                 "Taux d'int√©r√™t", "Indice boursier"]
            )

            n_points = st.slider("Nombre d'observations:", 50, 500, 250)

            t = np.arange(n_points)

            if type_serie == "Prix d'action (avec tendance)":
                # Mouvement brownien g√©om√©trique
                mu_drift = 0.0005
                sigma = 0.02
                S0 = 100
                rendements = np.random.normal(mu_drift, sigma, n_points)
                prix = S0 * np.exp(np.cumsum(rendements))

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=t, y=prix, mode='lines', name='Prix', line=dict(color='blue', width=2)))
                fig.update_layout(
                    title='Simulation de Prix d\'Action (Mouvement Brownien G√©om√©trique)',
                    xaxis_title='Temps (jours)',
                    yaxis_title='Prix (‚Ç¨)',
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation</h4>
                <ul>
                    <li>üìà Tendance haussi√®re (drift positif)</li>
                    <li>üé≤ Fluctuations al√©atoires (volatilit√©)</li>
                    <li>‚ùå <strong>Non-stationnaire</strong>: la moyenne √©volue dans le temps</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            elif type_serie == "Rendements (stationnaire)":
                # Rendements quotidiens
                mu_rend = 0.0005
                sigma_rend = 0.02
                rendements = np.random.normal(mu_rend, sigma_rend, n_points)

                fig = go.Figure()
                fig.add_trace(
                    go.Scatter(x=t, y=rendements, mode='lines', name='Rendements', line=dict(color='green', width=1)))
                fig.add_hline(y=mu_rend, line_dash="dash", line_color="red", annotation_text="Moyenne")
                fig.add_hline(y=mu_rend + 2 * sigma_rend, line_dash="dot", line_color="orange")
                fig.add_hline(y=mu_rend - 2 * sigma_rend, line_dash="dot", line_color="orange")

                fig.update_layout(
                    title='Rendements Quotidiens',
                    xaxis_title='Temps (jours)',
                    yaxis_title='Rendement',
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation</h4>
                <ul>
                    <li>üìä Moyenne constante autour de 0.05%</li>
                    <li>üìè Variance constante</li>
                    <li>‚úÖ <strong>Stationnaire</strong>: propri√©t√©s statistiques constantes</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            elif type_serie == "Taux d'int√©r√™t":
                # Processus de retour √† la moyenne (Ornstein-Uhlenbeck)
                theta = 0.1  # vitesse de retour
                mu_taux = 0.03  # niveau moyen
                sigma_taux = 0.005
                taux = np.zeros(n_points)
                taux[0] = mu_taux

                for i in range(1, n_points):
                    taux[i] = taux[i - 1] + theta * (mu_taux - taux[i - 1]) + sigma_taux * np.random.normal()

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=t, y=taux * 100, mode='lines', name='Taux d\'int√©r√™t',
                                         line=dict(color='purple', width=2)))
                fig.add_hline(y=mu_taux * 100, line_dash="dash", line_color="red", annotation_text="Niveau moyen")

                fig.update_layout(
                    title='Simulation de Taux d\'Int√©r√™t (Mod√®le de Vasicek)',
                    xaxis_title='Temps',
                    yaxis_title='Taux (%)',
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation</h4>
                <ul>
                    <li>üîÑ <strong>Retour √† la moyenne</strong>: le taux revient vers 3%</li>
                    <li>üìä Utilis√© pour mod√©liser les taux d'int√©r√™t</li>
                    <li>‚úÖ Propri√©t√© de stationnarit√©</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            else:  # Indice boursier
                # Indice avec saisonnalit√© et tendance
                tendance = 0.001 * t
                saisonnalite = 5 * np.sin(2 * np.pi * t / 50)
                bruit = np.random.normal(0, 2, n_points)
                indice = 100 + tendance + saisonnalite + bruit

                fig = go.Figure()
                fig.add_trace(
                    go.Scatter(x=t, y=indice, mode='lines', name='Indice', line=dict(color='darkblue', width=2)))
                fig.add_trace(go.Scatter(x=t, y=100 + tendance, mode='lines', name='Tendance',
                                         line=dict(color='red', dash='dash')))

                fig.update_layout(
                    title='Indice Boursier avec Tendance et Cycles',
                    xaxis_title='Temps',
                    yaxis_title='Valeur de l\'indice',
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation</h4>
                <ul>
                    <li>üìà Tendance croissante long terme</li>
                    <li>üîÑ Cycles √©conomiques (saisonnalit√©)</li>
                    <li>üé≤ Fluctuations al√©atoires court terme</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

        with tab3:
            st.markdown("### üé® D√©composition d'une S√©rie Temporelle")

            st.markdown("""
            <div class="theory-box">
            <h4>üìê Mod√®le de d√©composition</h4>
            <p>Une s√©rie temporelle peut √™tre d√©compos√©e en plusieurs composantes:</p>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"X_t = T_t + S_t + C_t + I_t")

            st.markdown("""
            - **T_t**: Tendance (Trend) - mouvement long terme
            - **S_t**: Saisonnalit√© (Seasonality) - variations p√©riodiques
            - **C_t**: Cycle - fluctuations moyen terme
            - **I_t**: Irr√©gularit√© (Irregular) - composante al√©atoire
            """)

            # Simulation interactive
            st.markdown("### üéõÔ∏è Cr√©ez votre propre s√©rie temporelle")

            col1, col2, col3 = st.columns(3)

            with col1:
                tendance_coef = st.slider("Force de la tendance:", 0.0, 0.5, 0.1, 0.01)
            with col2:
                saison_amp = st.slider("Amplitude saisonnalit√©:", 0.0, 20.0, 10.0, 1.0)
            with col3:
                bruit_std = st.slider("Intensit√© du bruit:", 0.0, 10.0, 3.0, 0.5)

            t = np.arange(200)

            # Composantes
            tendance = tendance_coef * t
            saisonnalite = saison_amp * np.sin(2 * np.pi * t / 25)
            cycle = 5 * np.sin(2 * np.pi * t / 50)
            irregulier = np.random.normal(0, bruit_std, len(t))

            serie = 100 + tendance + saisonnalite + cycle + irregulier

            # Graphique de d√©composition
            fig = make_subplots(
                rows=5, cols=1,
                subplot_titles=['S√©rie Compl√®te', 'Tendance', 'Saisonnalit√©', 'Cycle', 'Irr√©gularit√©'],
                vertical_spacing=0.05
            )

            fig.add_trace(go.Scatter(x=t, y=serie, mode='lines', name='S√©rie', line=dict(color='black')), row=1, col=1)
            fig.add_trace(go.Scatter(x=t, y=100 + tendance, mode='lines', name='Tendance', line=dict(color='red')),
                          row=2, col=1)
            fig.add_trace(go.Scatter(x=t, y=saisonnalite, mode='lines', name='Saisonnalit√©', line=dict(color='blue')),
                          row=3, col=1)
            fig.add_trace(go.Scatter(x=t, y=cycle, mode='lines', name='Cycle', line=dict(color='green')), row=4, col=1)
            fig.add_trace(go.Scatter(x=t, y=irregulier, mode='lines', name='Irr√©gularit√©', line=dict(color='orange')),
                          row=5, col=1)

            fig.update_layout(height=800, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

        with tab4:
            st.markdown("### üîß Simulateur de Processus Stochastiques")

            processus_type = st.selectbox(
                "Type de processus:",
                ["Bruit Blanc", "Marche Al√©atoire", "Processus AR(1)", "Processus MA(1)"]
            )

            n_obs = st.slider("Nombre d'observations:", 100, 1000, 500, key='sim_obs')

            if processus_type == "Bruit Blanc":
                st.markdown("""
                <div class="formula-box">
                <h4>üìê Bruit Blanc (White Noise)</h4>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \epsilon_t, \quad \epsilon_t \sim N(0, \sigma^2)")
                st.markdown("</div>", unsafe_allow_html=True)

                sigma_bb = st.slider("√âcart-type œÉ:", 0.1, 5.0, 1.0, 0.1)
                serie_sim = np.random.normal(0, sigma_bb, n_obs)
                titre = f"Bruit Blanc N(0, {sigma_bb}¬≤)"

            elif processus_type == "Marche Al√©atoire":
                st.markdown("""
                <div class="formula-box">
                <h4>üìê Marche Al√©atoire (Random Walk)</h4>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = X_{t-1} + \epsilon_t")
                st.markdown("</div>", unsafe_allow_html=True)

                sigma_rw = st.slider("√âcart-type œÉ:", 0.1, 5.0, 1.0, 0.1)
                innovations = np.random.normal(0, sigma_rw, n_obs)
                serie_sim = np.cumsum(innovations)
                titre = "Marche Al√©atoire"

            elif processus_type == "Processus AR(1)":
                st.markdown("""
                <div class="formula-box">
                <h4>üìê Processus Autor√©gressif d'ordre 1</h4>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \phi X_{t-1} + \epsilon_t")
                st.markdown("</div>", unsafe_allow_html=True)

                phi = st.slider("Coefficient œÜ:", -0.99, 0.99, 0.7, 0.01)
                sigma_ar = st.slider("√âcart-type œÉ:", 0.1, 5.0, 1.0, 0.1)

                serie_sim = np.zeros(n_obs)
                for t in range(1, n_obs):
                    serie_sim[t] = phi * serie_sim[t - 1] + np.random.normal(0, sigma_ar)

                titre = f"Processus AR(1), œÜ={phi}"

                if abs(phi) >= 1:
                    st.warning("‚ö†Ô∏è Processus non-stationnaire (|œÜ| ‚â• 1)")
                else:
                    st.success(f"‚úÖ Processus stationnaire (|œÜ| < 1)")

            else:  # MA(1)
                st.markdown("""
                <div class="formula-box">
                <h4>üìê Processus Moyenne Mobile d'ordre 1</h4>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \epsilon_t + \theta \epsilon_{t-1}")
                st.markdown("</div>", unsafe_allow_html=True)

                theta = st.slider("Coefficient Œ∏:", -0.99, 0.99, 0.5, 0.01)
                sigma_ma = st.slider("√âcart-type œÉ:", 0.1, 5.0, 1.0, 0.1)

                epsilon = np.random.normal(0, sigma_ma, n_obs)
                serie_sim = np.zeros(n_obs)
                serie_sim[0] = epsilon[0]
                for t in range(1, n_obs):
                    serie_sim[t] = epsilon[t] + theta * epsilon[t - 1]

                titre = f"Processus MA(1), Œ∏={theta}"

            # Graphiques
            col1, col2 = st.columns(2)

            with col1:
                fig1 = go.Figure()
                fig1.add_trace(go.Scatter(y=serie_sim, mode='lines', name=titre, line=dict(width=1.5)))
                fig1.update_layout(title=titre, xaxis_title='Temps', yaxis_title='Valeur', height=300)
                st.plotly_chart(fig1, use_container_width=True)

            with col2:
                fig2 = go.Figure()
                fig2.add_trace(go.Histogram(x=serie_sim, nbinsx=50, name='Distribution'))
                fig2.update_layout(title='Distribution', xaxis_title='Valeur', yaxis_title='Fr√©quence', height=300)
                st.plotly_chart(fig2, use_container_width=True)

            # Statistiques
            st.markdown("### üìä Statistiques de la s√©rie simul√©e")
            col_a, col_b, col_c, col_d = st.columns(4)
            col_a.metric("Moyenne", f"{np.mean(serie_sim):.4f}")
            col_b.metric("√âcart-type", f"{np.std(serie_sim):.4f}")
            col_c.metric("Minimum", f"{np.min(serie_sim):.4f}")
            col_d.metric("Maximum", f"{np.max(serie_sim):.4f}")

    # ========== SECTION 1.3 ==========
    elif section == "1.3 - Processus stationnaires":
        st.markdown('<p class="sub-header">1.3 - Processus Stationnaires</p>', unsafe_allow_html=True)

        tab1, tab2, tab3 = st.tabs(["üìö Th√©orie", "üîÑ Stationnarit√© Forte vs Faible", "üéØ Applications"])

        with tab1:
            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Qu'est-ce que la Stationnarit√©?</h3>
            <p>Un processus stochastique est <strong>stationnaire</strong> si ses propri√©t√©s statistiques
            <strong>ne changent pas dans le temps</strong>.</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìê Stationnarit√© Forte (Stricte)")
                st.markdown("""
                <div class="formula-box">
                <p>La distribution conjointe de (X<sub>t‚ÇÅ</sub>, ..., X<sub>t‚Çô</sub>) est la m√™me que
                celle de (X<sub>t‚ÇÅ+h</sub>, ..., X<sub>t‚Çô+h</sub>) pour tout h.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"F(x_1, ..., x_n; t_1, ..., t_n) = F(x_1, ..., x_n; t_1+h, ..., t_n+h)")

                st.markdown("""
                **Implications:**
                - Toute la distribution reste identique
                - Condition tr√®s forte, rarement v√©rifiable
                """)

            with col2:
                st.markdown("### üìä Stationnarit√© Faible (au second ordre)")
                st.markdown("""
                <div class="formula-box">
                <p>Les deux premiers moments sont constants dans le temps.</p>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("**Trois conditions:**")
                st.latex(r"1. \quad E[X_t] = \mu \quad \forall t")
                st.latex(r"2. \quad Var(X_t) = \sigma^2 \quad \forall t")
                st.latex(r"3. \quad Cov(X_t, X_{t+h}) = \gamma(h) \quad \text{(d√©pend seulement de h)}")

                st.markdown("""
                **C'est la d√©finition utilis√©e en pratique!**
                """)

            st.markdown("---")

            st.markdown("### üîë Concepts Cl√©s")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("""
                <div class="example-box">
                <h4>üìä Moyenne Constante</h4>
                <p>E[X<sub>t</sub>] = Œº</p>
                <p>La s√©rie oscille autour d'un niveau fixe</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="example-box">
                <h4>üìè Variance Constante</h4>
                <p>Var(X<sub>t</sub>) = œÉ¬≤</p>
                <p>La dispersion ne change pas</p>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                st.markdown("""
                <div class="example-box">
                <h4>üîÑ Autocovariance</h4>
                <p>Œ≥(h) = Cov(X<sub>t</sub>, X<sub>t+h</sub>)</p>
                <p>D√©pend seulement du d√©calage h</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("### üìê Fonction d'Autocovariance")
            st.latex(r"\gamma(h) = Cov(X_t, X_{t+h}) = E[(X_t - \mu)(X_{t+h} - \mu)]")

            st.markdown("**Propri√©t√©s:**")
            st.latex(r"\gamma(0) = Var(X_t) = \sigma^2")
            st.latex(r"\gamma(h) = \gamma(-h) \quad \text{(sym√©trie)}")
            st.latex(r"|\gamma(h)| \leq \gamma(0)")

            st.markdown("### üìà Fonction d'Autocorr√©lation (ACF)")
            st.latex(r"\rho(h) = \frac{\gamma(h)}{\gamma(0)} = \frac{Cov(X_t, X_{t+h})}{Var(X_t)}")

            st.markdown("**Propri√©t√©s:**")
            st.latex(r"-1 \leq \rho(h) \leq 1")
            st.latex(r"\rho(0) = 1")

        with tab2:
            st.markdown("### üîÑ Comparaison: Processus Stationnaire vs Non-Stationnaire")

            n_points = 300
            t = np.arange(n_points)

            # Processus stationnaire (AR(1) avec |œÜ| < 1)
            phi_stat = 0.7
            stationnaire = np.zeros(n_points)
            for i in range(1, n_points):
                stationnaire[i] = phi_stat * stationnaire[i - 1] + np.random.normal(0, 1)

            # Processus non-stationnaire (marche al√©atoire)
            non_stationnaire = np.cumsum(np.random.normal(0, 1, n_points))

            # Tendance d√©terministe
            tendance = 0.05 * t + np.random.normal(0, 1, n_points)

            fig = make_subplots(
                rows=1, cols=3,
                subplot_titles=['‚úÖ Stationnaire (AR)', '‚ùå Non-Stationnaire (Marche Al√©atoire)',
                                '‚ùå Tendance D√©terministe']
            )

            fig.add_trace(go.Scatter(y=stationnaire, mode='lines', name='Stationnaire', line=dict(color='green')),
                          row=1, col=1)
            fig.add_trace(go.Scatter(y=non_stationnaire, mode='lines', name='Non-Stat', line=dict(color='red')), row=1,
                          col=2)
            fig.add_trace(go.Scatter(y=tendance, mode='lines', name='Tendance', line=dict(color='orange')), row=1,
                          col=3)

            # Lignes de moyenne
            fig.add_hline(y=np.mean(stationnaire), line_dash="dash", line_color="green", row=1, col=1)

            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("""
                <div class="example-box">
                <h4>‚úÖ Stationnaire</h4>
                <ul>
                    <li>Moyenne constante ‚âà 0</li>
                    <li>Variance constante</li>
                    <li>Revient vers la moyenne</li>
                    <li>Pr√©visible √† long terme</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ùå Non-Stationnaire</h4>
                <ul>
                    <li>Pas de niveau moyen fixe</li>
                    <li>Variance croissante</li>
                    <li>Drift al√©atoire</li>
                    <li>Impr√©visible long terme</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ùå Avec Tendance</h4>
                <ul>
                    <li>Moyenne croissante</li>
                    <li>Tendance d√©terministe</li>
                    <li>N√©cessite diff√©renciation</li>
                    <li>Ou d√©trend</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")

            st.markdown("### üìä Fonction d'Autocorr√©lation (ACF)")

            # Calcul ACF
            from statsmodels.tsa.stattools import acf

            acf_stat = acf(stationnaire, nlags=40)
            acf_nonstat = acf(non_stationnaire, nlags=40)

            fig2 = make_subplots(rows=1, cols=2, subplot_titles=['ACF - Stationnaire', 'ACF - Non-Stationnaire'])

            fig2.add_trace(go.Bar(y=acf_stat, name='ACF Stat', marker_color='green'), row=1, col=1)
            fig2.add_trace(go.Bar(y=acf_nonstat, name='ACF Non-Stat', marker_color='red'), row=1, col=2)

            fig2.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig2, use_container_width=True)

            st.markdown("""
            <div class="theory-box">
            <h4>üí° Interpr√©tation de l'ACF</h4>
            <ul>
                <li><strong>Stationnaire:</strong> ACF d√©cro√Æt rapidement vers 0</li>
                <li><strong>Non-Stationnaire:</strong> ACF d√©cro√Æt tr√®s lentement, reste √©lev√©e</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

        with tab3:
            st.markdown("### üéØ Importance de la Stationnarit√© en Finance")

            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Pourquoi la stationnarit√© est-elle importante?</h3>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                ### ‚úÖ Avantages d'un processus stationnaire

                1. **Pr√©vision possible**
                   - Le comportement pass√© est repr√©sentatif du futur
                   - Mod√®les statistiques applicables

                2. **Th√©orie asymptotique valide**
                   - Convergence des estimateurs
                   - Tests statistiques fiables

                3. **Interpr√©tation stable**
                   - Param√®tres constants dans le temps
                   - Relations √©conomiques stables

                4. **Mod√©lisation ARMA applicable**
                   - Base th√©orique solide
                   - Estimation coh√©rente
                """)

            with col2:
                st.markdown("""
                ### ‚ö†Ô∏è Probl√®mes avec la non-stationnarit√©

                1. **R√©gression fallacieuse (spurious)**
                   - Corr√©lations artificielles
                   - R¬≤ √©lev√© mais non significatif

                2. **Tests invalides**
                   - Distributions non-standard
                   - Inf√©rence incorrecte

                3. **Pr√©visions non fiables**
                   - Variance croissante
                   - Intervalles de confiance inexacts

                4. **N√©cessit√© de transformation**
                   - Diff√©renciation
                   - D√©trend
                   - Transformation logarithmique
                """)

            st.markdown("---")

            st.markdown("### üíº Applications Pratiques")

            st.markdown("""
            <div class="example-box">
            <h4>üìà S√©ries Financi√®res Typiques</h4>

            **G√©n√©ralement NON-stationnaires:**
            - Prix des actions (marche al√©atoire)
            - Indices boursiers (tendance)
            - PIB (croissance tendancielle)
            - Taux de change (drift)

            **G√©n√©ralement stationnaires:**
            - Rendements d'actions
            - Variations de taux d'int√©r√™t
            - Spread de taux
            - Primes de risque
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üîß Comment rendre une s√©rie stationnaire?")

            option_transfo = st.selectbox(
                "Choisissez une transformation:",
                ["Diff√©renciation premi√®re", "Diff√©renciation logarithmique (rendements)", "D√©trend (r√©gression)"]
            )

            # S√©rie non-stationnaire simul√©e (prix)
            np.random.seed(42)
            n = 200
            prix = 100 * np.exp(np.cumsum(np.random.normal(0.001, 0.02, n)))

            if option_transfo == "Diff√©renciation premi√®re":
                transformee = np.diff(prix)
                titre_transfo = "Diff√©rence Premi√®re: ŒîX_t = X_t - X_{t-1}"

            elif option_transfo == "Diff√©renciation logarithmique (rendements)":
                transformee = np.diff(np.log(prix))
                titre_transfo = "Rendements: r_t = ln(P_t) - ln(P_{t-1})"

            else:  # D√©trend
                from scipy import signal

                transformee = signal.detrend(prix)
                titre_transfo = "S√©rie d√©tendue (r√©gression lin√©aire)"

            fig = make_subplots(rows=1, cols=2,
                                subplot_titles=['‚ùå S√©rie Originale (Non-Stationnaire)', f'‚úÖ {titre_transfo}'])

            fig.add_trace(go.Scatter(y=prix, mode='lines', name='Prix', line=dict(color='red')), row=1, col=1)
            fig.add_trace(go.Scatter(y=transformee, mode='lines', name='Transform√©e', line=dict(color='green')), row=1,
                          col=2)

            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

            # Statistiques comparatives
            st.markdown("### üìä Statistiques Comparatives")
            col_a, col_b = st.columns(2)

            with col_a:
                st.markdown("**S√©rie Originale:**")
                st.write(f"- Moyenne: {np.mean(prix):.2f}")
                st.write(f"- √âcart-type: {np.std(prix):.2f}")
                st.write(f"- Min: {np.min(prix):.2f}")
                st.write(f"- Max: {np.max(prix):.2f}")

            with col_b:
                st.markdown("**S√©rie Transform√©e:**")
                st.write(f"- Moyenne: {np.mean(transformee):.6f}")
                st.write(f"- √âcart-type: {np.std(transformee):.6f}")
                st.write(f"- Min: {np.min(transformee):.6f}")
                st.write(f"- Max: {np.max(transformee):.6f}")

    # ========== SECTION 1.4 ==========
    elif section == "1.4 - Th√©or√®me de Wold":
        st.markdown('<p class="sub-header">1.4 - Th√©or√®me de Wold (D√©composition de Wold)</p>', unsafe_allow_html=True)

        tab1, tab2, tab3 = st.tabs(["üìö Th√©or√®me", "üîç D√©monstration Visuelle", "üí° Applications"])

        with tab1:
            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Le Th√©or√®me de Wold</h3>
            <p>Tout processus stationnaire peut √™tre d√©compos√© en deux parties ind√©pendantes:</p>
            <ol>
                <li>Une partie <strong>stochastique</strong> (impr√©visible)</li>
                <li>Une partie <strong>d√©terministe</strong> (pr√©visible)</li>
            </ol>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìê Formulation Math√©matique")

            st.latex(r"X_t = \sum_{j=0}^{\infty} \psi_j \epsilon_{t-j} + V_t")

            st.markdown(r"""
            o√π:
            - **Partie stochastique:** $\sum_{j=0}^{\infty} \psi_j \epsilon_{t-j}$ avec $\epsilon_t$ un bruit blanc
            - **Partie d√©terministe:** $V_t$ (pr√©visible √† partir du pass√© infini)
            - **Coefficients:** $\psi_0 = 1$ et $\sum_{j=0}^{\infty} \psi_j^2 < \infty$
            """)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                <div class="formula-box">
                <h4>üìä Partie Stochastique (MA(‚àû))</h4>
                """, unsafe_allow_html=True)
                st.latex(r"\sum_{j=0}^{\infty} \psi_j \epsilon_{t-j}")
                st.markdown("""
                <ul>
                    <li>Combinaison lin√©aire infinie de chocs al√©atoires</li>
                    <li>Repr√©sentation MA(‚àû)</li>
                    <li>Innovation: Œµ<sub>t</sub> ~ BB(0, œÉ¬≤)</li>
                    <li>Non pr√©visible (nouvelle information)</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="example-box">
                <h4>üéØ Partie D√©terministe</h4>
                <p>V<sub>t</sub></p>
                <ul>
                    <li>Parfaitement pr√©visible</li>
                    <li>Fonctions d√©terministes du temps</li>
                    <li>Exemples: constantes, tendances, saisonnalit√©s</li>
                    <li>Ind√©pendante des innovations</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")

            st.markdown("### üîë Implications Importantes")

            st.markdown("""
            <div class="theory-box">
            <h4>üí° Cons√©quences du Th√©or√®me de Wold</h4>

            1. **Tout processus stationnaire a une repr√©sentation MA(‚àû)**
               - Fondement th√©orique des mod√®les ARMA
               - Justification de l'approche Box-Jenkins

            2. **S√©paration entre al√©atoire et d√©terministe**
               - Permet d'isoler la partie impr√©visible
               - Facilite la mod√©lisation

            3. **Base des pr√©visions**
               - Pr√©visions optimales = partie d√©terministe
               - Erreur de pr√©vision = innovations futures

            4. **Condition de sommabilit√©**
               - $\sum_{j=0}^{\infty} \psi_j^2 < \infty$ garantit la variance finie
               - Assure la stationnarit√©
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìà Repr√©sentation Graphique")

            st.image(
                "https://via.placeholder.com/800x300/e8f4f8/1f77b4?text=X_t+%3D+Partie+Stochastique+%2B+Partie+D√©terministe",
                use_container_width=True)

        with tab2:
            st.markdown("### üîç D√©monstration Visuelle Interactive")

            st.markdown("""
            <div class="example-box">
            <h4>üé® Construisons un processus selon Wold</h4>
            <p>Exp√©rimentez avec les diff√©rentes composantes!</p>
            </div>
            """, unsafe_allow_html=True)

            # Contr√¥les
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("**Partie Stochastique (MA)**")
                n_coeffs = st.slider("Nombre de coefficients œà:", 1, 20, 5)
                sigma_innov = st.slider("œÉ (innovations):", 0.1, 3.0, 1.0, 0.1)

            with col2:
                st.markdown("**Partie D√©terministe**")
                tendance = st.checkbox("Ajouter tendance")
                if tendance:
                    trend_coef = st.slider("Coefficient tendance:", -0.1, 0.1, 0.01, 0.01)

                saisonalite = st.checkbox("Ajouter saisonnalit√©")
                if saisonalite:
                    amp_saison = st.slider("Amplitude saisonnalit√©:", 0.0, 10.0, 5.0, 0.5)

            with col3:
                st.markdown("**Param√®tres g√©n√©raux**")
                n_obs = st.slider("Nombre observations:", 100, 500, 250)
                graine = st.number_input("Graine al√©atoire:", 0, 1000, 42)

            # Simulation
            np.random.seed(graine)

            # Coefficients MA qui d√©croissent
            psi = np.array([0.9 ** j for j in range(n_coeffs)])

            # Innovations (bruit blanc)
            epsilon = np.random.normal(0, sigma_innov, n_obs + n_coeffs)

            # Partie stochastique (MA)
            stochastique = np.zeros(n_obs)
            for t in range(n_obs):
                stochastique[t] = np.sum(psi * epsilon[t:t + n_coeffs])

            # Partie d√©terministe
            deterministe = np.zeros(n_obs)
            t_array = np.arange(n_obs)

            if tendance:
                deterministe += trend_coef * t_array

            if saisonalite:
                deterministe += amp_saison * np.sin(2 * np.pi * t_array / 25)

            # Processus complet
            X_t = stochastique + deterministe

            # Graphiques
            fig = make_subplots(
                rows=3, cols=1,
                subplot_titles=['Partie Stochastique (MA)', 'Partie D√©terministe', 'Processus Complet (Wold)'],
                vertical_spacing=0.1
            )

            fig.add_trace(go.Scatter(y=stochastique, mode='lines', name='Stochastique', line=dict(color='blue')), row=1,
                          col=1)
            fig.add_trace(go.Scatter(y=deterministe, mode='lines', name='D√©terministe', line=dict(color='red')), row=2,
                          col=1)
            fig.add_trace(go.Scatter(y=X_t, mode='lines', name='X_t', line=dict(color='black', width=2)), row=3, col=1)

            fig.update_layout(height=700, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

            # Affichage des coefficients
            st.markdown("### üìä Coefficients MA (œà)")

            fig_coef = go.Figure()
            fig_coef.add_trace(go.Bar(x=list(range(n_coeffs)), y=psi, name='œà_j', marker_color='lightblue'))
            fig_coef.update_layout(
                title='D√©croissance des coefficients œà',
                xaxis_title='j (d√©calage)',
                yaxis_title='œà_j',
                height=300
            )
            st.plotly_chart(fig_coef, use_container_width=True)

            st.markdown(f"""
            <div class="formula-box">
            <h4>‚úÖ V√©rification de la condition de sommabilit√©</h4>
            <p>Somme des carr√©s: Œ£œà¬≤<sub>j</sub> = {np.sum(psi ** 2):.4f} < ‚àû</p>
            <p>‚úÖ La condition est satisfaite!</p>
            </div>
            """, unsafe_allow_html=True)

        with tab3:
            st.markdown("### üí° Applications et Cons√©quences")

            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Pourquoi le Th√©or√®me de Wold est-il fondamental?</h3>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                ### üìà En Th√©orie

                1. **Fondement des mod√®les ARMA**
                   - Tout processus stationnaire ‚Üí MA(‚àû)
                   - Approximation par ARMA fini
                   - Justification th√©orique solide

                2. **Repr√©sentation universelle**
                   - Unicit√© de la d√©composition
                   - Innovations orthogonales
                   - Identification claire

                3. **Th√©orie des pr√©visions**
                   - Pr√©vision optimale = projection
                   - Erreur = innovations futures
                   - Variance de pr√©vision calculable
                """)

            with col2:
                st.markdown("""
                ### üíº En Pratique

                1. **Mod√©lisation financi√®re**
                   - Rendements d'actifs
                   - Volatilit√© (GARCH)
                   - Taux d'int√©r√™t

                2. **Choix du mod√®le**
                   - AR, MA, ou ARMA?
                   - Crit√®res d'information (AIC, BIC)
                   - Parcimonie vs pr√©cision

                3. **Diagnostic**
                   - Analyse des r√©sidus
                   - Test de bruit blanc
                   - Validation du mod√®le
                """)

            st.markdown("---")

            st.markdown("### üîÑ Du Th√©or√®me de Wold aux Mod√®les ARMA")

            st.markdown("""
            <div class="example-box">
            <h4>üéì Cheminement logique</h4>

            1. **Th√©or√®me de Wold** ‚Üí Tout processus stationnaire a une repr√©sentation MA(‚àû)

            2. **Probl√®me pratique** ‚Üí Infinit√© de param√®tres √† estimer!

            3. **Solution: Parcimonie** ‚Üí Approximation par mod√®les finis

            4. **Mod√®les ARMA** ‚Üí Repr√©sentation compacte et efficace

            5. **AR(p)**: p param√®tres au lieu de ‚àû

            6. **MA(q)**: q param√®tres au lieu de ‚àû

            7. **ARMA(p,q)**: p+q param√®tres, maximum de flexibilit√©
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìä Exemple Concret: Du MA(‚àû) au MA(2)")

            # Simulation comparative
            np.random.seed(123)
            n = 300
            epsilon = np.random.normal(0, 1, n + 50)

            # MA(infini) - 50 coefficients
            psi_inf = np.array([0.8 ** j for j in range(50)])
            ma_inf = np.zeros(n)
            for t in range(n):
                ma_inf[t] = np.sum(psi_inf * epsilon[t:t + 50])

            # MA(2) - approximation
            psi_2 = np.array([1, 0.8, 0.64])  # œà0=1, œà1=0.8, œà2=0.64
            ma_2 = np.zeros(n)
            for t in range(n):
                ma_2[t] = np.sum(psi_2 * epsilon[t:t + 3])

            fig_comp = make_subplots(rows=2, cols=1,
                                     subplot_titles=['MA(‚àû) - 50 coefficients', 'MA(2) - Approximation'])

            fig_comp.add_trace(go.Scatter(y=ma_inf, mode='lines', name='MA(‚àû)', line=dict(color='blue')), row=1, col=1)
            fig_comp.add_trace(go.Scatter(y=ma_2, mode='lines', name='MA(2)', line=dict(color='red')), row=2, col=1)

            fig_comp.update_layout(height=500, showlegend=False)
            st.plotly_chart(fig_comp, use_container_width=True)

            # Corr√©lation
            correlation = np.corrcoef(ma_inf, ma_2)[0, 1]

            st.markdown(f"""
            <div class="formula-box">
            <h4>üìä Qualit√© de l'approximation</h4>
            <p>Corr√©lation entre MA(‚àû) et MA(2): <strong>{correlation:.4f}</strong></p>
            <p>{"‚úÖ Excellente approximation!" if correlation > 0.95 else "‚ö†Ô∏è Approximation acceptable"}</p>
            </div>
            """, unsafe_allow_html=True)

    # ========== SECTION 1.5 ==========
    elif section == "1.5 - Processus ARMA":
        st.markdown('<p class="sub-header">1.5 - Processus ARMA (AutoRegressive Moving Average)</p>',
                    unsafe_allow_html=True)

        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìö Introduction",
            "üìä Processus AR(p)",
            "üìà Processus MA(q)",
            "üîÑ Processus ARMA(p,q)",
            "üéØ Application Pratique"
        ])

        with tab1:
            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Les Mod√®les ARMA : Vue d'Ensemble</h3>
            <p>Les mod√®les ARMA combinent deux approches compl√©mentaires pour mod√©liser les s√©ries temporelles stationnaires.</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("""
                <div class="formula-box">
                <h4>üìä AR - AutoR√©gressif</h4>
                <p>Le pr√©sent d√©pend du <strong>pass√© de la s√©rie</strong></p>
                </div>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \sum_{i=1}^p \phi_i X_{t-i} + \epsilon_t")
                st.markdown("""
                <p><strong>M√©moire longue</strong> via les valeurs pass√©es</p>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="example-box">
                <h4>üìà MA - Moyenne Mobile</h4>
                <p>Le pr√©sent d√©pend des <strong>erreurs pass√©es</strong></p>
                </div>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \sum_{j=1}^q \theta_j \epsilon_{t-j} + \epsilon_t")
                st.markdown("""
                <p><strong>M√©moire courte</strong> via les chocs pass√©s</p>
                """, unsafe_allow_html=True)

            with col3:
                st.markdown("""
                <div class="theory-box">
                <h4>üîÑ ARMA - Combinaison</h4>
                <p><strong>Le meilleur des deux mondes</strong></p>
                </div>
                """, unsafe_allow_html=True)
                st.latex(r"X_t = \sum_{i=1}^p \phi_i X_{t-i} + \sum_{j=1}^q \theta_j \epsilon_{t-j} + \epsilon_t")
                st.markdown("""
                <p><strong>Flexibilit√© maximale</strong></p>
                """, unsafe_allow_html=True)

            st.markdown("---")

            st.markdown("### üìê Notation Op√©rateur de Retard (Backshift)")

            st.markdown("""
            <div class="formula-box">
            <h4>üîß Op√©rateur L (Lag Operator)</h4>
            """, unsafe_allow_html=True)

            st.latex(r"L \cdot X_t = X_{t-1}")
            st.latex(r"L^k \cdot X_t = X_{t-k}")

            st.markdown("""
            **Polyn√¥mes caract√©ristiques:**
            """)

            st.latex(r"\Phi(L) = 1 - \phi_1 L - \phi_2 L^2 - ... - \phi_p L^p")
            st.latex(r"\Theta(L) = 1 + \theta_1 L + \theta_2 L^2 + ... + \theta_q L^q")

            st.markdown("""
            **Forme compacte ARMA:**
            """)

            st.latex(r"\Phi(L) X_t = \Theta(L) \epsilon_t")

            st.markdown("</div>", unsafe_allow_html=True)

            st.markdown("### üîë Concepts Fondamentaux")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                <div class="theory-box">
                <h4>‚úÖ Stationnarit√©</h4>
                <p><strong>Condition:</strong> Les racines de Œ¶(L) = 0 doivent √™tre <strong>hors du cercle unit√©</strong></p>
                <p>|z| > 1 pour toutes les racines z</p>
                <p>Pour AR(1): |œÜ| < 1</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="example-box">
                <h4>üîÑ Inversibilit√©</h4>
                <p><strong>Condition:</strong> Les racines de Œò(L) = 0 doivent √™tre <strong>hors du cercle unit√©</strong></p>
                <p>Permet de repr√©senter ARMA comme AR(‚àû)</p>
                <p>Pour MA(1): |Œ∏| < 1</p>
                </div>
                """, unsafe_allow_html=True)

        with tab2:
            st.markdown("### üìä Processus AutoR√©gressif AR(p)")

            st.markdown("""
            <div class="theory-box">
            <h3>üéØ D√©finition</h3>
            <p>Un processus AR(p) est un processus o√π la valeur actuelle d√©pend lin√©airement de ses p valeurs pass√©es.</p>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"X_t = c + \phi_1 X_{t-1} + \phi_2 X_{t-2} + ... + \phi_p X_{t-p} + \epsilon_t")

            st.markdown("""
            o√π:
            - c est une constante
            - œÜ‚ÇÅ, œÜ‚ÇÇ, ..., œÜ‚Çö sont les coefficients autor√©gressifs
            - Œµ‚Çú ~ BB(0, œÉ¬≤) est un bruit blanc
            """)

            # S√©lection de l'ordre
            ordre_ar = st.selectbox("Choisissez l'ordre du processus AR:", ["AR(1)", "AR(2)", "AR(3)"])

            if ordre_ar == "AR(1)":
                st.markdown("### üìê Processus AR(1)")

                st.latex(r"X_t = \phi X_{t-1} + \epsilon_t")

                col1, col2 = st.columns([1, 2])

                with col1:
                    phi_ar1 = st.slider("Coefficient œÜ:", -0.99, 0.99, 0.7, 0.01, key='phi_ar1')
                    sigma_ar1 = st.slider("œÉ (bruit blanc):", 0.1, 3.0, 1.0, 0.1, key='sigma_ar1')
                    n_ar1 = st.slider("Nombre observations:", 100, 500, 250, key='n_ar1')

                    if abs(phi_ar1) < 1:
                        st.success(f"‚úÖ Processus stationnaire (|œÜ| = {abs(phi_ar1):.2f} < 1)")
                    else:
                        st.error(f"‚ùå Processus non-stationnaire (|œÜ| = {abs(phi_ar1):.2f} ‚â• 1)")

                    # Propri√©t√©s th√©oriques
                    if abs(phi_ar1) < 1:
                        st.markdown("**Propri√©t√©s th√©oriques:**")
                        mu_theor = 0
                        var_theor = sigma_ar1 ** 2 / (1 - phi_ar1 ** 2)
                        st.write(f"Moyenne: {mu_theor}")
                        st.write(f"Variance: {var_theor:.4f}")

                # Simulation
                np.random.seed(42)
                ar1_series = np.zeros(n_ar1)
                epsilon = np.random.normal(0, sigma_ar1, n_ar1)

                for t in range(1, n_ar1):
                    ar1_series[t] = phi_ar1 * ar1_series[t - 1] + epsilon[t]

                with col2:
                    # Graphique de la s√©rie
                    fig_ar1 = go.Figure()
                    fig_ar1.add_trace(
                        go.Scatter(y=ar1_series, mode='lines', name='AR(1)', line=dict(color='blue', width=1.5)))
                    fig_ar1.update_layout(
                        title=f'Simulation AR(1) avec œÜ = {phi_ar1}',
                        xaxis_title='Temps',
                        yaxis_title='Valeur',
                        height=300
                    )
                    st.plotly_chart(fig_ar1, use_container_width=True)

                # ACF et PACF
                st.markdown("### üìä Fonctions d'Autocorr√©lation")

                acf_ar1 = acf(ar1_series, nlags=20)
                pacf_ar1 = pacf(ar1_series, nlags=20)

                fig_acf = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])

                # ACF
                fig_acf.add_trace(go.Bar(y=acf_ar1, name='ACF', marker_color='lightblue'), row=1, col=1)
                fig_acf.add_hline(y=1.96 / np.sqrt(n_ar1), line_dash="dash", line_color="red", row=1, col=1)
                fig_acf.add_hline(y=-1.96 / np.sqrt(n_ar1), line_dash="dash", line_color="red", row=1, col=1)

                # PACF
                fig_acf.add_trace(go.Bar(y=pacf_ar1, name='PACF', marker_color='lightcoral'), row=1, col=2)
                fig_acf.add_hline(y=1.96 / np.sqrt(n_ar1), line_dash="dash", line_color="red", row=1, col=2)
                fig_acf.add_hline(y=-1.96 / np.sqrt(n_ar1), line_dash="dash", line_color="red", row=1, col=2)

                fig_acf.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation AR(1)</h4>
                <ul>
                    <li><strong>ACF:</strong> D√©croissance exponentielle (g√©om√©trique)</li>
                    <li><strong>PACF:</strong> Un seul pic significatif au lag 1, puis 0</li>
                    <li>Ce pattern identifie clairement un processus AR(1)</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            elif ordre_ar == "AR(2)":
                st.markdown("### üìê Processus AR(2)")

                st.latex(r"X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \epsilon_t")

                col1, col2 = st.columns([1, 2])

                with col1:
                    phi1_ar2 = st.slider("Coefficient œÜ‚ÇÅ:", -1.99, 1.99, 0.5, 0.01, key='phi1_ar2')
                    phi2_ar2 = st.slider("Coefficient œÜ‚ÇÇ:", -1.0, 1.0, 0.3, 0.01, key='phi2_ar2')
                    sigma_ar2 = st.slider("œÉ (bruit blanc):", 0.1, 3.0, 1.0, 0.1, key='sigma_ar2')
                    n_ar2 = st.slider("Nombre observations:", 100, 500, 250, key='n_ar2')

                    # Conditions de stationnarit√© AR(2)
                    cond1 = phi1_ar2 + phi2_ar2 < 1
                    cond2 = phi2_ar2 - phi1_ar2 < 1
                    cond3 = abs(phi2_ar2) < 1

                    if cond1 and cond2 and cond3:
                        st.success("‚úÖ Processus stationnaire")
                    else:
                        st.error("‚ùå Processus non-stationnaire")

                    st.markdown("**Conditions de stationnarit√©:**")
                    st.write(f"œÜ‚ÇÅ + œÜ‚ÇÇ < 1: {'‚úÖ' if cond1 else '‚ùå'} ({phi1_ar2 + phi2_ar2:.2f})")
                    st.write(f"œÜ‚ÇÇ - œÜ‚ÇÅ < 1: {'‚úÖ' if cond2 else '‚ùå'} ({phi2_ar2 - phi1_ar2:.2f})")
                    st.write(f"|œÜ‚ÇÇ| < 1: {'‚úÖ' if cond3 else '‚ùå'} ({abs(phi2_ar2):.2f})")

                # Simulation AR(2)
                np.random.seed(42)
                ar2_series = np.zeros(n_ar2)
                epsilon = np.random.normal(0, sigma_ar2, n_ar2)

                for t in range(2, n_ar2):
                    ar2_series[t] = phi1_ar2 * ar2_series[t - 1] + phi2_ar2 * ar2_series[t - 2] + epsilon[t]

                with col2:
                    fig_ar2 = go.Figure()
                    fig_ar2.add_trace(
                        go.Scatter(y=ar2_series, mode='lines', name='AR(2)', line=dict(color='green', width=1.5)))
                    fig_ar2.update_layout(
                        title=f'Simulation AR(2) avec œÜ‚ÇÅ={phi1_ar2}, œÜ‚ÇÇ={phi2_ar2}',
                        xaxis_title='Temps',
                        yaxis_title='Valeur',
                        height=300
                    )
                    st.plotly_chart(fig_ar2, use_container_width=True)

                # ACF et PACF
                acf_ar2 = acf(ar2_series, nlags=20)
                pacf_ar2 = pacf(ar2_series, nlags=20)

                fig_acf2 = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])

                fig_acf2.add_trace(go.Bar(y=acf_ar2, name='ACF', marker_color='lightblue'), row=1, col=1)
                fig_acf2.add_hline(y=1.96 / np.sqrt(n_ar2), line_dash="dash", line_color="red", row=1, col=1)
                fig_acf2.add_hline(y=-1.96 / np.sqrt(n_ar2), line_dash="dash", line_color="red", row=1, col=1)

                fig_acf2.add_trace(go.Bar(y=pacf_ar2, name='PACF', marker_color='lightcoral'), row=1, col=2)
                fig_acf2.add_hline(y=1.96 / np.sqrt(n_ar2), line_dash="dash", line_color="red", row=1, col=2)
                fig_acf2.add_hline(y=-1.96 / np.sqrt(n_ar2), line_dash="dash", line_color="red", row=1, col=2)

                fig_acf2.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf2, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation AR(2)</h4>
                <ul>
                    <li><strong>ACF:</strong> D√©croissance (peut √™tre oscillante si racines complexes)</li>
                    <li><strong>PACF:</strong> Deux pics significatifs (lags 1 et 2), puis 0</li>
                    <li>Identification: PACF tronqu√©e au lag p pour AR(p)</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            else:  # AR(3)
                st.markdown("### üìê Processus AR(3)")

                st.latex(r"X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \phi_3 X_{t-3} + \epsilon_t")

                col1, col2 = st.columns([1, 2])

                with col1:
                    phi1_ar3 = st.slider("œÜ‚ÇÅ:", -1.0, 1.0, 0.4, 0.01, key='phi1_ar3')
                    phi2_ar3 = st.slider("œÜ‚ÇÇ:", -1.0, 1.0, 0.3, 0.01, key='phi2_ar3')
                    phi3_ar3 = st.slider("œÜ‚ÇÉ:", -1.0, 1.0, 0.2, 0.01, key='phi3_ar3')
                    sigma_ar3 = st.slider("œÉ:", 0.1, 3.0, 1.0, 0.1, key='sigma_ar3')
                    n_ar3 = st.slider("n:", 100, 500, 250, key='n_ar3')

                np.random.seed(42)
                ar3_series = np.zeros(n_ar3)
                epsilon = np.random.normal(0, sigma_ar3, n_ar3)

                for t in range(3, n_ar3):
                    ar3_series[t] = (phi1_ar3 * ar3_series[t - 1] +
                                     phi2_ar3 * ar3_series[t - 2] +
                                     phi3_ar3 * ar3_series[t - 3] +
                                     epsilon[t])

                with col2:
                    fig_ar3 = go.Figure()
                    fig_ar3.add_trace(go.Scatter(y=ar3_series, mode='lines', line=dict(color='purple', width=1.5)))
                    fig_ar3.update_layout(
                        title=f'AR(3): œÜ‚ÇÅ={phi1_ar3}, œÜ‚ÇÇ={phi2_ar3}, œÜ‚ÇÉ={phi3_ar3}',
                        height=300
                    )
                    st.plotly_chart(fig_ar3, use_container_width=True)

                # ACF et PACF
                acf_ar3 = acf(ar3_series, nlags=20)
                pacf_ar3 = pacf(ar3_series, nlags=20)

                fig_acf3 = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])
                fig_acf3.add_trace(go.Bar(y=acf_ar3, marker_color='lightblue'), row=1, col=1)
                fig_acf3.add_trace(go.Bar(y=pacf_ar3, marker_color='lightcoral'), row=1, col=2)

                fig_acf3.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf3, use_container_width=True)

        with tab3:
            st.markdown("### üìà Processus Moyenne Mobile MA(q)")

            st.markdown("""
            <div class="theory-box">
            <h3>üéØ D√©finition</h3>
            <p>Un processus MA(q) est une combinaison lin√©aire des q derni√®res innovations (erreurs).</p>
            </div>
            """, unsafe_allow_html=True)

            st.latex(
                r"X_t = \mu + \epsilon_t + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2} + ... + \theta_q \epsilon_{t-q}")

            ordre_ma = st.selectbox("Choisissez l'ordre:", ["MA(1)", "MA(2)", "MA(3)"])

            if ordre_ma == "MA(1)":
                st.markdown("### üìê Processus MA(1)")

                st.latex(r"X_t = \epsilon_t + \theta \epsilon_{t-1}")

                col1, col2 = st.columns([1, 2])

                with col1:
                    theta_ma1 = st.slider("Coefficient Œ∏:", -0.99, 0.99, 0.6, 0.01, key='theta_ma1')
                    sigma_ma1 = st.slider("œÉ:", 0.1, 3.0, 1.0, 0.1, key='sigma_ma1')
                    n_ma1 = st.slider("n:", 100, 500, 250, key='n_ma1')

                    if abs(theta_ma1) < 1:
                        st.success(f"‚úÖ Processus inversible (|Œ∏| = {abs(theta_ma1):.2f} < 1)")
                    else:
                        st.warning(f"‚ö†Ô∏è Processus non-inversible (|Œ∏| = {abs(theta_ma1):.2f} ‚â• 1)")

                    st.markdown("**Propri√©t√©s th√©oriques:**")
                    st.write("Moyenne: 0")
                    var_ma1 = sigma_ma1 ** 2 * (1 + theta_ma1 ** 2)
                    st.write(f"Variance: {var_ma1:.4f}")

                # Simulation MA(1)
                np.random.seed(42)
                epsilon_ma1 = np.random.normal(0, sigma_ma1, n_ma1)
                ma1_series = np.zeros(n_ma1)
                ma1_series[0] = epsilon_ma1[0]

                for t in range(1, n_ma1):
                    ma1_series[t] = epsilon_ma1[t] + theta_ma1 * epsilon_ma1[t - 1]

                with col2:
                    fig_ma1 = go.Figure()
                    fig_ma1.add_trace(go.Scatter(y=ma1_series, mode='lines', line=dict(color='red', width=1.5)))
                    fig_ma1.update_layout(
                        title=f'MA(1) avec Œ∏ = {theta_ma1}',
                        xaxis_title='Temps',
                        yaxis_title='Valeur',
                        height=300
                    )
                    st.plotly_chart(fig_ma1, use_container_width=True)

                # ACF et PACF
                acf_ma1 = acf(ma1_series, nlags=20)
                pacf_ma1 = pacf(ma1_series, nlags=20)

                fig_acf_ma = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])

                fig_acf_ma.add_trace(go.Bar(y=acf_ma1, marker_color='lightblue'), row=1, col=1)
                fig_acf_ma.add_hline(y=1.96 / np.sqrt(n_ma1), line_dash="dash", line_color="red", row=1, col=1)
                fig_acf_ma.add_hline(y=-1.96 / np.sqrt(n_ma1), line_dash="dash", line_color="red", row=1, col=1)

                fig_acf_ma.add_trace(go.Bar(y=pacf_ma1, marker_color='lightcoral'), row=1, col=2)
                fig_acf_ma.add_hline(y=1.96 / np.sqrt(n_ma1), line_dash="dash", line_color="red", row=1, col=2)
                fig_acf_ma.add_hline(y=-1.96 / np.sqrt(n_ma1), line_dash="dash", line_color="red", row=1, col=2)

                fig_acf_ma.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf_ma, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation MA(1)</h4>
                <ul>
                    <li><strong>ACF:</strong> Un seul pic significatif au lag 1, puis 0</li>
                    <li><strong>PACF:</strong> D√©croissance exponentielle (g√©om√©trique)</li>
                    <li>Pattern inverse de AR(1)!</li>
                    <li>M√©moire courte: influence seulement sur 1 p√©riode</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

                # ACF th√©orique
                st.markdown("### üìä ACF Th√©orique vs Empirique")

                rho_1_theor = theta_ma1 / (1 + theta_ma1 ** 2)

                st.markdown(f"""
                <div class="formula-box">
                <h4>ACF Th√©orique MA(1)</h4>
                <p>œÅ(1) = Œ∏ / (1 + Œ∏¬≤) = {rho_1_theor:.4f}</p>
                <p>œÅ(h) = 0 pour h > 1</p>
                <p><strong>ACF empirique au lag 1:</strong> {acf_ma1[1]:.4f}</p>
                </div>
                """, unsafe_allow_html=True)

            elif ordre_ma == "MA(2)":
                st.markdown("### üìê Processus MA(2)")

                st.latex(r"X_t = \epsilon_t + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2}")

                col1, col2 = st.columns([1, 2])

                with col1:
                    theta1_ma2 = st.slider("Œ∏‚ÇÅ:", -0.99, 0.99, 0.5, 0.01, key='theta1_ma2')
                    theta2_ma2 = st.slider("Œ∏‚ÇÇ:", -0.99, 0.99, 0.3, 0.01, key='theta2_ma2')
                    sigma_ma2 = st.slider("œÉ:", 0.1, 3.0, 1.0, 0.1, key='sigma_ma2')
                    n_ma2 = st.slider("n:", 100, 500, 250, key='n_ma2')

                # Simulation MA(2)
                np.random.seed(42)
                epsilon_ma2 = np.random.normal(0, sigma_ma2, n_ma2)
                ma2_series = np.zeros(n_ma2)

                for t in range(2, n_ma2):
                    ma2_series[t] = (epsilon_ma2[t] +
                                     theta1_ma2 * epsilon_ma2[t - 1] +
                                     theta2_ma2 * epsilon_ma2[t - 2])

                with col2:
                    fig_ma2 = go.Figure()
                    fig_ma2.add_trace(go.Scatter(y=ma2_series, mode='lines', line=dict(color='orange', width=1.5)))
                    fig_ma2.update_layout(
                        title=f'MA(2): Œ∏‚ÇÅ={theta1_ma2}, Œ∏‚ÇÇ={theta2_ma2}',
                        height=300
                    )
                    st.plotly_chart(fig_ma2, use_container_width=True)

                # ACF et PACF
                acf_ma2 = acf(ma2_series, nlags=20)
                pacf_ma2 = pacf(ma2_series, nlags=20)

                fig_acf_ma2 = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])
                fig_acf_ma2.add_trace(go.Bar(y=acf_ma2, marker_color='lightblue'), row=1, col=1)
                fig_acf_ma2.add_trace(go.Bar(y=pacf_ma2, marker_color='lightcoral'), row=1, col=2)
                fig_acf_ma2.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf_ma2, use_container_width=True)

                st.markdown("""
                <div class="example-box">
                <h4>üí° Interpr√©tation MA(2)</h4>
                <ul>
                    <li><strong>ACF:</strong> Deux pics significatifs (lags 1 et 2), puis 0</li>
                    <li><strong>PACF:</strong> D√©croissance exponentielle</li>
                    <li>ACF tronqu√©e au lag q pour MA(q)</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            else:  # MA(3)
                st.markdown("### üìê Processus MA(3)")

                st.latex(
                    r"X_t = \epsilon_t + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2} + \theta_3 \epsilon_{t-3}")

                col1, col2 = st.columns([1, 2])

                with col1:
                    theta1_ma3 = st.slider("Œ∏‚ÇÅ:", -0.99, 0.99, 0.4, 0.01)
                    theta2_ma3 = st.slider("Œ∏‚ÇÇ:", -0.99, 0.99, 0.3, 0.01)
                    theta3_ma3 = st.slider("Œ∏‚ÇÉ:", -0.99, 0.99, 0.2, 0.01)
                    sigma_ma3 = st.slider("œÉ:", 0.1, 3.0, 1.0, 0.1)
                    n_ma3 = st.slider("n:", 100, 500, 250)

                np.random.seed(42)
                epsilon_ma3 = np.random.normal(0, sigma_ma3, n_ma3)
                ma3_series = np.zeros(n_ma3)

                for t in range(3, n_ma3):
                    ma3_series[t] = (epsilon_ma3[t] +
                                     theta1_ma3 * epsilon_ma3[t - 1] +
                                     theta2_ma3 * epsilon_ma3[t - 2] +
                                     theta3_ma3 * epsilon_ma3[t - 3])

                with col2:
                    fig_ma3 = go.Figure()
                    fig_ma3.add_trace(go.Scatter(y=ma3_series, mode='lines', line=dict(color='darkred', width=1.5)))
                    fig_ma3.update_layout(title='MA(3)', height=300)
                    st.plotly_chart(fig_ma3, use_container_width=True)

                acf_ma3 = acf(ma3_series, nlags=20)
                pacf_ma3 = pacf(ma3_series, nlags=20)

                fig_acf_ma3 = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])
                fig_acf_ma3.add_trace(go.Bar(y=acf_ma3, marker_color='lightblue'), row=1, col=1)
                fig_acf_ma3.add_trace(go.Bar(y=pacf_ma3, marker_color='lightcoral'), row=1, col=2)
                fig_acf_ma3.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_acf_ma3, use_container_width=True)

        with tab4:
            st.markdown("### üîÑ Processus ARMA(p,q)")

            st.markdown("""
            <div class="theory-box">
            <h3>üéØ Combinaison AR + MA</h3>
            <p>ARMA(p,q) combine les avantages des deux approches pour une mod√©lisation optimale.</p>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"X_t = c + \sum_{i=1}^p \phi_i X_{t-i} + \epsilon_t + \sum_{j=1}^q \theta_j \epsilon_{t-j}")

            st.markdown("**Forme op√©rateur:**")
            st.latex(r"\Phi(L) X_t = \Theta(L) \epsilon_t")

            st.markdown("### üéõÔ∏è Simulateur ARMA Interactif")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("**Partie AR**")
                p_arma = st.selectbox("Ordre p:", [0, 1, 2, 3], index=1)

                phi_arma = []
                for i in range(p_arma):
                    phi_arma.append(st.slider(f"œÜ_{i + 1}:", -0.99, 0.99, 0.5 / (i + 1), 0.01, key=f'phi_arma_{i}'))

            with col2:
                st.markdown("**Partie MA**")
                q_arma = st.selectbox("Ordre q:", [0, 1, 2, 3], index=1)

                theta_arma = []
                for j in range(q_arma):
                    theta_arma.append(st.slider(f"Œ∏_{j + 1}:", -0.99, 0.99, 0.3 / (j + 1), 0.01, key=f'theta_arma_{j}'))

            with col3:
                st.markdown("**Param√®tres**")
                sigma_arma = st.slider("œÉ:", 0.1, 3.0, 1.0, 0.1, key='sigma_arma')
                n_arma = st.slider("n:", 100, 1000, 500, key='n_arma')

            # Simulation ARMA
            if p_arma > 0 or q_arma > 0:
                try:
                    ar_params = np.array([1] + [-phi for phi in phi_arma])
                    ma_params = np.array([1] + theta_arma)

                    arma_process = ArmaProcess(ar_params, ma_params)

                    if arma_process.isstationary and arma_process.isinvertible:
                        arma_series = arma_process.generate_sample(n_arma, scale=sigma_arma)

                        # Graphique
                        fig_arma = go.Figure()
                        fig_arma.add_trace(go.Scatter(
                            y=arma_series,
                            mode='lines',
                            name=f'ARMA({p_arma},{q_arma})',
                            line=dict(color='darkblue', width=1.5)
                        ))
                        fig_arma.update_layout(
                            title=f'Simulation ARMA({p_arma},{q_arma})',
                            xaxis_title='Temps',
                            yaxis_title='Valeur',
                            height=400
                        )
                        st.plotly_chart(fig_arma, use_container_width=True)

                        # ACF et PACF
                        acf_arma = acf(arma_series, nlags=30)
                        pacf_arma = pacf(arma_series, nlags=30)

                        fig_acf_arma = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])

                        fig_acf_arma.add_trace(go.Bar(y=acf_arma, marker_color='lightblue'), row=1, col=1)
                        fig_acf_arma.add_hline(y=1.96 / np.sqrt(n_arma), line_dash="dash", line_color="red", row=1,
                                               col=1)
                        fig_acf_arma.add_hline(y=-1.96 / np.sqrt(n_arma), line_dash="dash", line_color="red", row=1,
                                               col=1)

                        fig_acf_arma.add_trace(go.Bar(y=pacf_arma, marker_color='lightcoral'), row=1, col=2)
                        fig_acf_arma.add_hline(y=1.96 / np.sqrt(n_arma), line_dash="dash", line_color="red", row=1,
                                               col=2)
                        fig_acf_arma.add_hline(y=-1.96 / np.sqrt(n_arma), line_dash="dash", line_color="red", row=1,
                                               col=2)

                        fig_acf_arma.update_layout(height=400, showlegend=False)
                        st.plotly_chart(fig_acf_arma, use_container_width=True)

                        st.success("‚úÖ Processus stationnaire et inversible")

                        # Statistiques
                        st.markdown("### üìä Statistiques")
                        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
                        col_stat1.metric("Moyenne", f"{np.mean(arma_series):.4f}")
                        col_stat2.metric("√âcart-type", f"{np.std(arma_series):.4f}")
                        col_stat3.metric("Min", f"{np.min(arma_series):.4f}")
                        col_stat4.metric("Max", f"{np.max(arma_series):.4f}")

                    else:
                        if not arma_process.isstationary:
                            st.error("‚ùå Processus non-stationnaire! Ajustez les param√®tres AR.")
                        if not arma_process.isinvertible:
                            st.warning("‚ö†Ô∏è Processus non-inversible! Ajustez les param√®tres MA.")

                except Exception as e:
                    st.error(f"Erreur de simulation: {str(e)}")
            else:
                st.info("Choisissez au moins p>0 ou q>0 pour simuler un processus ARMA")

            st.markdown("---")

            st.markdown("""
            <div class="theory-box">
            <h3>üìã Guide d'Identification ARMA</h3>
            </div>
            """, unsafe_allow_html=True)

            identification_df = pd.DataFrame({
                'Mod√®le': ['AR(p)', 'MA(q)', 'ARMA(p,q)'],
                'ACF': ['D√©cro√Æt exponentiellement', 'Tronqu√©e au lag q', 'D√©cro√Æt exponentiellement'],
                'PACF': ['Tronqu√©e au lag p', 'D√©cro√Æt exponentiellement', 'D√©cro√Æt exponentiellement']
            })

            st.table(identification_df)

        with tab5:
            st.markdown("### üéØ Application Pratique: Estimation d'un Mod√®le ARMA")

            st.markdown("""
            <div class="example-box">
            <h3>üìä √âtude de Cas Compl√®te</h3>
            <p>Nous allons suivre toutes les √©tapes pour mod√©liser une s√©rie temporelle.</p>
            </div>
            """, unsafe_allow_html=True)

            # Choix: donn√©es simul√©es ou exemple
            data_choice = st.radio(
                "Source des donn√©es:",
                ["Simuler un processus ARMA", "Utiliser des donn√©es d'exemple (prix quotidiens)"]
            )

            if data_choice == "Simuler un processus ARMA":
                st.markdown("### 1Ô∏è‚É£ G√©n√©rer les donn√©es")

                col_gen1, col_gen2 = st.columns(2)

                with col_gen1:
                    true_p = st.selectbox("Ordre AR (vrai):", [0, 1, 2], index=1, key='true_p')
                    true_phi = []
                    for i in range(true_p):
                        true_phi.append(
                            st.slider(f"œÜ_{i + 1} (vrai):", -0.9, 0.9, 0.6 / (i + 1), 0.1, key=f'true_phi_{i}'))

                with col_gen2:
                    true_q = st.selectbox("Ordre MA (vrai):", [0, 1, 2], index=1, key='true_q')
                    true_theta = []
                    for j in range(true_q):
                        true_theta.append(
                            st.slider(f"Œ∏_{j + 1} (vrai):", -0.9, 0.9, 0.4 / (j + 1), 0.1, key=f'true_theta_{j}'))

                n_sample = st.slider("Taille de l'√©chantillon:", 100, 1000, 300)

                # G√©n√©ration
                ar_true = np.array([1] + [-phi for phi in true_phi])
                ma_true = np.array([1] + true_theta)

                arma_true = ArmaProcess(ar_true, ma_true)
                data_series = arma_true.generate_sample(n_sample, scale=1.0)

                st.success(f"‚úÖ Donn√©es g√©n√©r√©es: ARMA({true_p},{true_q}) avec {n_sample} observations")

            else:
                # Simuler des "prix quotidiens" r√©alistes
                st.markdown("### 1Ô∏è‚É£ Chargement des donn√©es")

                np.random.seed(123)
                n_sample = 500

                # Prix (log-rendements ARMA)
                returns_arma = ArmaProcess([1, -0.3], [1, 0.5]).generate_sample(n_sample, scale=0.01)
                prix = 100 * np.exp(np.cumsum(returns_arma))

                # On travaille avec les rendements
                data_series = np.diff(np.log(prix))

                st.info("üìä Donn√©es: Rendements logarithmiques quotidiens (n=499)")

            # Visualisation
            fig_data = go.Figure()
            fig_data.add_trace(go.Scatter(
                y=data_series,
                mode='lines',
                name='S√©rie observ√©e',
                line=dict(color='black', width=1)
            ))
            fig_data.update_layout(
                title='S√©rie Temporelle Observ√©e',
                xaxis_title='Temps',
                yaxis_title='Valeur',
                height=300
            )
            st.plotly_chart(fig_data, use_container_width=True)

            # √âtape 2: ACF/PACF
            st.markdown("### 2Ô∏è‚É£ Analyse ACF/PACF pour identifier l'ordre")

            nlags_diag = st.slider("Nombre de lags √† afficher:", 10, 50, 30)

            acf_data = acf(data_series, nlags=nlags_diag)
            pacf_data = pacf(data_series, nlags=nlags_diag)

            fig_diag = make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])

            fig_diag.add_trace(go.Bar(y=acf_data, marker_color='steelblue'), row=1, col=1)
            fig_diag.add_hline(y=1.96 / np.sqrt(len(data_series)), line_dash="dash", line_color="red", row=1, col=1)
            fig_diag.add_hline(y=-1.96 / np.sqrt(len(data_series)), line_dash="dash", line_color="red", row=1, col=1)

            fig_diag.add_trace(go.Bar(y=pacf_data, marker_color='coral'), row=1, col=2)
            fig_diag.add_hline(y=1.96 / np.sqrt(len(data_series)), line_dash="dash", line_color="red", row=1, col=2)
            fig_diag.add_hline(y=-1.96 / np.sqrt(len(data_series)), line_dash="dash", line_color="red", row=1, col=2)

            fig_diag.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig_diag, use_container_width=True)

            # √âtape 3: Estimation
            st.markdown("### 3Ô∏è‚É£ Estimation du mod√®le ARMA")

            col_est1, col_est2 = st.columns(2)

            with col_est1:
                p_est = st.selectbox("Ordre AR √† estimer:", [0, 1, 2, 3], index=1, key='p_est')

            with col_est2:
                q_est = st.selectbox("Ordre MA √† estimer:", [0, 1, 2, 3], index=1, key='q_est')

            if st.button("üöÄ Estimer le mod√®le ARMA"):
                try:
                    model_arma = ARIMA(data_series, order=(p_est, 0, q_est))
                    results_arma = model_arma.fit()

                    st.success(f"‚úÖ Mod√®le ARMA({p_est},{q_est}) estim√© avec succ√®s!")

                    # R√©sum√©
                    st.markdown("### üìä R√©sultats de l'estimation")

                    st.text(results_arma.summary())

                    # Coefficients
                    st.markdown("### üìà Coefficients estim√©s")

                    coef_df = pd.DataFrame({
                        'Param√®tre': results_arma.params.index,
                        'Valeur': results_arma.params.values,
                        'Std Error': results_arma.bse.values,
                        'P-value': results_arma.pvalues.values
                    })

                    st.dataframe(coef_df.style.format({'Valeur': '{:.4f}', 'Std Error': '{:.4f}', 'P-value': '{:.4f}'}))

                    # Crit√®res d'information
                    st.markdown("### üìè Crit√®res d'Information")

                    col_aic, col_bic = st.columns(2)
                    col_aic.metric("AIC", f"{results_arma.aic:.2f}")
                    col_bic.metric("BIC", f"{results_arma.bic:.2f}")

                    # Diagnostic des r√©sidus
                    st.markdown("### 4Ô∏è‚É£ Diagnostic des R√©sidus")

                    residus = results_arma.resid

                    fig_resid = make_subplots(
                        rows=2, cols=2,
                        subplot_titles=['R√©sidus', 'Histogramme', 'ACF des r√©sidus', 'Q-Q Plot']
                    )

                    # R√©sidus
                    fig_resid.add_trace(go.Scatter(y=residus, mode='lines', line=dict(color='green')), row=1, col=1)

                    # Histogramme
                    fig_resid.add_trace(go.Histogram(x=residus, nbinsx=30, marker_color='lightgreen'), row=1, col=2)

                    # ACF r√©sidus
                    acf_resid = acf(residus, nlags=20)
                    fig_resid.add_trace(go.Bar(y=acf_resid, marker_color='lightblue'), row=2, col=1)

                    # Q-Q plot
                    from scipy import stats as sp_stats

                    qq = sp_stats.probplot(residus, dist="norm")
                    fig_resid.add_trace(go.Scatter(x=qq[0][0], y=qq[0][1], mode='markers', marker=dict(color='purple')),
                                        row=2, col=2)
                    fig_resid.add_trace(go.Scatter(x=qq[0][0], y=qq[1][0] * qq[0][0] + qq[1][1],
                                                   mode='lines', line=dict(color='red', dash='dash')), row=2, col=2)

                    fig_resid.update_layout(height=600, showlegend=False)
                    st.plotly_chart(fig_resid, use_container_width=True)

                    # Test de Ljung-Box
                    st.markdown("### üîç Test de Ljung-Box (Bruit Blanc)")

                    lb_test = acorr_ljungbox(residus, lags=[10, 20], return_df=True)
                    st.dataframe(lb_test)

                    if lb_test['lb_pvalue'].min() > 0.05:
                        st.success("‚úÖ Les r√©sidus ressemblent √† un bruit blanc (p > 0.05)")
                    else:
                        st.warning("‚ö†Ô∏è Les r√©sidus ne sont pas un bruit blanc (p < 0.05). Essayez un autre mod√®le.")

                    # Pr√©visions
                    st.markdown("### 5Ô∏è‚É£ Pr√©visions")

                    n_forecast = st.slider("Horizon de pr√©vision:", 1, 50, 10)

                    forecast_result = results_arma.get_forecast(steps=n_forecast)
                    forecast_mean = forecast_result.predicted_mean
                    forecast_ci = forecast_result.conf_int()

                    # Graphique pr√©visions
                    fig_forecast = go.Figure()

                    # Donn√©es historiques
                    fig_forecast.add_trace(go.Scatter(
                        y=data_series[-100:],
                        mode='lines',
                        name='Donn√©es historiques',
                        line=dict(color='black')
                    ))

                    # Pr√©visions
                    forecast_index = np.arange(len(data_series), len(data_series) + n_forecast)

                    fig_forecast.add_trace(go.Scatter(
                        x=forecast_index,
                        y=forecast_mean,
                        mode='lines',
                        name='Pr√©vision',
                        line=dict(color='red', dash='dash')
                    ))

                    # Intervalle de confiance
                    fig_forecast.add_trace(go.Scatter(
                        x=np.concatenate([forecast_index, forecast_index[::-1]]),
                        y=np.concatenate([forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1][::-1]]),
                        fill='toself',
                        fillcolor='rgba(255,0,0,0.2)',
                        line=dict(color='rgba(255,0,0,0)'),
                        name='IC 95%'
                    ))

                    fig_forecast.update_layout(
                        title=f'Pr√©visions ARMA({p_est},{q_est}) - Horizon {n_forecast}',
                        xaxis_title='Temps',
                        yaxis_title='Valeur',
                        height=400
                    )
                    st.plotly_chart(fig_forecast, use_container_width=True)

                except Exception as e:
                    st.error(f"Erreur lors de l'estimation: {str(e)}")

            st.markdown("""
            <div class="theory-box">
            <h3>üìö R√©sum√© de la M√©thodologie Box-Jenkins</h3>
            <ol>
                <li><strong>Identification:</strong> ACF/PACF pour choisir p et q</li>
                <li><strong>Estimation:</strong> Maximum de vraisemblance</li>
                <li><strong>Validation:</strong> Diagnostic des r√©sidus (bruit blanc?)</li>
                <li><strong>Pr√©vision:</strong> Utiliser le mod√®le valid√©</li>
            </ol>
            </div>
            """, unsafe_allow_html=True)

# ==================== CHAPITRE 2 ====================
elif chapitre == "üîç Chapitre 2: Tests de Stationnarit√©":

    st.sidebar.markdown("---")
    section_ch2 = st.sidebar.selectbox(
        "Choisissez une section:",
        ["2.1 - Processus non stationnaires",
         "2.2 - Test de Dickey-Fuller",
         "2.3 - Test ADF (Augmented Dickey-Fuller)",
         "2.4 - Processus ARIMA"]
    )

    # ========== SECTION 2.1 ==========
    if section_ch2 == "2.1 - Processus non stationnaires":
        st.markdown('<p class="sub-header">2.1 - Processus Non Stationnaires</p>', unsafe_allow_html=True)

        tab1, tab2, tab3 = st.tabs(["üìö Th√©orie", "üîç Types de Non-Stationnarit√©", "üé® Visualisations"])

        with tab1:
            st.markdown("""
            <div class="warning-box">
            <h3>‚ö†Ô∏è Qu'est-ce qu'un Processus Non-Stationnaire?</h3>
            <p>Un processus est <strong>non-stationnaire</strong> si au moins une de ses propri√©t√©s statistiques
            <strong>change dans le temps</strong>.</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üîë Caract√©ristiques des Processus Non-Stationnaires")

            col1, col2 = st.columns(2)
            with col1:
                st.markdown("""
                <div class="info-box">
                <h4>üìä Processus Stationnaire</h4>
                <ul>
                    <li>Moyenne constante: E[X‚Çú] = Œº</li>
                    <li>Variance constante: Var[X‚Çú] = œÉ¬≤</li>
                    <li>Autocovariance d√©pend seulement du d√©calage</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ö†Ô∏è Processus Non-Stationnaire</h4>
                <ul>
                    <li>Moyenne variable: E[X‚Çú] ‚â† constante</li>
                    <li>Variance variable: Var[X‚Çú] ‚â† constante</li>
                    <li>Tendance ou saisonnalit√© pr√©sente</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")
            st.markdown("### üìê D√©finition Math√©matique")

            st.latex(r"""
            \text{Un processus } X_t \text{ est stationnaire si:}
            """)

            st.latex(r"""
            \begin{cases}
            E[X_t] = \mu & \forall t \\
            Var[X_t] = \sigma^2 & \forall t \\
            Cov[X_t, X_{t+h}] = \gamma(h) & \forall t, h
            \end{cases}
            """)

            st.markdown("""
            <div class="formula-box">
            <p><strong>Si au moins une condition n'est pas satisfaite</strong> ‚Üí Processus NON-STATIONNAIRE</p>
            </div>
            """, unsafe_allow_html=True)

        with tab2:
            st.markdown("### üéØ Types de Non-Stationnarit√©")

            type_ns = st.selectbox(
                "S√©lectionnez le type √† explorer:",
                ["Tendance D√©terministe (TS)",
                 "Tendance Stochastique (DS)",
                 "Variance Non-Constante",
                 "Comparaison des Types"]
            )

            if type_ns == "Tendance D√©terministe (TS)":
                st.markdown("""
                <div class="info-box">
                <h4>üìà Trend-Stationary (TS)</h4>
                <p>Le processus contient une <strong>tendance d√©terministe</strong> qui peut √™tre mod√©lis√©e par une fonction du temps.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                X_t = \alpha + \beta t + \varepsilon_t
                """)

                st.markdown("""
                O√π:
                - Œ± : constante
                - Œ≤ : coefficient de tendance
                - t : temps
                - Œµ‚Çú : bruit blanc stationnaire
                """)

                st.markdown("### üîß Correction:")
                st.markdown("""
                <div class="success-box">
                <p><strong>D√©tendanciation (Detrending)</strong>: Soustraire la tendance estim√©e</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                Y_t = X_t - (\hat{\alpha} + \hat{\beta}t)
                """)

            elif type_ns == "Tendance Stochastique (DS)":
                st.markdown("""
                <div class="warning-box">
                <h4>üé≤ Difference-Stationary (DS)</h4>
                <p>Le processus contient une <strong>racine unitaire</strong>.
                La non-stationnarit√© est de nature <strong>stochastique</strong>.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                X_t = X_{t-1} + \varepsilon_t \quad \text{(Marche Al√©atoire)}
                """)

                st.markdown("### üìä Mod√®le G√©n√©ral avec D√©rive:")
                st.latex(r"""
                X_t = \delta + X_{t-1} + \varepsilon_t
                """)

                st.markdown("### üîß Correction:")
                st.markdown("""
                <div class="success-box">
                <p><strong>Diff√©renciation</strong>: Prendre la diff√©rence premi√®re</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = X_t - X_{t-1} = \delta + \varepsilon_t
                """)

            elif type_ns == "Variance Non-Constante":
                st.markdown("""
                <div class="info-box">
                <h4>üìä H√©t√©rosc√©dasticit√©</h4>
                <p>La variance du processus <strong>change dans le temps</strong>.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                Var[X_t] = \sigma_t^2 \neq \sigma^2
                """)

                st.markdown("### üîß Correction:")
                st.markdown("""
                <div class="success-box">
                <p><strong>Transformation</strong>:</p>
                <ul>
                    <li>Logarithme: log(X‚Çú)</li>
                    <li>Racine carr√©e: ‚àöX‚Çú</li>
                    <li>Transformation de Box-Cox</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)

            else:  # Comparaison
                st.markdown("### üìä Tableau Comparatif")

                comparison_df = pd.DataFrame({
                    'Caract√©ristique': ['Nature', 'Mod√®le', 'Correction', 'Exemple', 'R√©version'],
                    'TS (Trend-Stationary)': [
                        'D√©terministe',
                        'X‚Çú = Œ± + Œ≤t + Œµ‚Çú',
                        'D√©tendanciation',
                        'PIB avec tendance lin√©aire',
                        'Revient √† la tendance'
                    ],
                    'DS (Difference-Stationary)': [
                        'Stochastique',
                        'X‚Çú = X‚Çú‚Çã‚ÇÅ + Œµ‚Çú',
                        'Diff√©renciation',
                        'Prix boursiers',
                        'Pas de r√©version'
                    ]
                })

                st.dataframe(comparison_df, use_container_width=True)

        with tab3:
            st.markdown("### üé® Visualisations Interactives")

            st.markdown("#### Param√®tres de Simulation")
            col1, col2, col3 = st.columns(3)

            with col1:
                n_points = st.slider("Nombre de points", 100, 500, 200)
            with col2:
                trend_coef = st.slider("Coefficient de tendance (Œ≤)", 0.0, 2.0, 0.5)
            with col3:
                noise_std = st.slider("√âcart-type du bruit", 0.1, 5.0, 1.0)

            # Simulation
            np.random.seed(42)
            t = np.arange(n_points)
            epsilon = np.random.normal(0, noise_std, n_points)

            # Processus TS
            ts_process = 10 + trend_coef * t + epsilon

            # Processus DS (Random Walk)
            ds_process = np.cumsum(epsilon) + 10

            # Processus Stationnaire
            stationary = epsilon + 10

            # Graphiques
            fig = make_subplots(
                rows=3, cols=2,
                subplot_titles=('Processus TS', 'ACF - TS',
                                'Processus DS', 'ACF - DS',
                                'Processus Stationnaire', 'ACF - Stationnaire'),
                vertical_spacing=0.12,
                horizontal_spacing=0.1
            )

            # TS
            fig.add_trace(go.Scatter(x=t, y=ts_process, mode='lines',
                                     name='TS', line=dict(color='red')), row=1, col=1)

            # ACF TS
            acf_ts = [np.corrcoef(ts_process[:-i], ts_process[i:])[0, 1] if i > 0 else 1
                      for i in range(min(40, n_points // 4))]
            fig.add_trace(go.Bar(x=list(range(len(acf_ts))), y=acf_ts,
                                 name='ACF-TS', marker_color='red'), row=1, col=2)

            # DS
            fig.add_trace(go.Scatter(x=t, y=ds_process, mode='lines',
                                     name='DS', line=dict(color='blue')), row=2, col=1)

            # ACF DS
            acf_ds = [np.corrcoef(ds_process[:-i], ds_process[i:])[0, 1] if i > 0 else 1
                      for i in range(min(40, n_points // 4))]
            fig.add_trace(go.Bar(x=list(range(len(acf_ds))), y=acf_ds,
                                 name='ACF-DS', marker_color='blue'), row=2, col=2)

            # Stationnaire
            fig.add_trace(go.Scatter(x=t, y=stationary, mode='lines',
                                     name='Stationnaire', line=dict(color='green')), row=3, col=1)

            # ACF Stationnaire
            acf_stat = [np.corrcoef(stationary[:-i], stationary[i:])[0, 1] if i > 0 else 1
                        for i in range(min(40, n_points // 4))]
            fig.add_trace(go.Bar(x=list(range(len(acf_stat))), y=acf_stat,
                                 name='ACF-Stat', marker_color='green'), row=3, col=2)

            fig.update_layout(height=900, showlegend=False, title_text="Comparaison des Processus")
            st.plotly_chart(fig, use_container_width=True)

            # Statistiques
            st.markdown("### üìä Statistiques Descriptives")
            stats_df = pd.DataFrame({
                'Processus': ['TS', 'DS', 'Stationnaire'],
                'Moyenne': [np.mean(ts_process), np.mean(ds_process), np.mean(stationary)],
                '√âcart-type': [np.std(ts_process), np.std(ds_process), np.std(stationary)],
                'Min': [np.min(ts_process), np.min(ds_process), np.min(stationary)],
                'Max': [np.max(ts_process), np.max(ds_process), np.max(stationary)]
            })
            st.dataframe(stats_df.style.format({'Moyenne': '{:.2f}',
                                                '√âcart-type': '{:.2f}',
                                                'Min': '{:.2f}',
                                                'Max': '{:.2f}'}), use_container_width=True)

    # ========== SECTION 2.2 ==========
    elif section_ch2 == "2.2 - Test de Dickey-Fuller":
        st.markdown('<p class="sub-header">2.2 - Test de Dickey-Fuller (DF)</p>', unsafe_allow_html=True)

        tab1, tab2, tab3, tab4 = st.tabs(["üìö Th√©orie", "üî¢ Mod√®les DF", "üíª Application", "üéØ Interpr√©tation"])

        with tab1:
            st.markdown("""
            <div class="info-box">
            <h3>üéØ Objectif du Test de Dickey-Fuller</h3>
            <p>Tester la pr√©sence d'une <strong>racine unitaire</strong> dans une s√©rie temporelle.</p>
            <p>C'est-√†-dire: d√©terminer si la s√©rie est <strong>stationnaire</strong> ou <strong>non-stationnaire</strong>.</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìñ Contexte Historique")
            st.markdown("""
            - **D√©velopp√© par**: David Dickey et Wayne Fuller (1979)
            - **Application**: √âconom√©trie, finance, analyse de s√©ries temporelles
            - **Importance**: Test fondamental avant toute mod√©lisation ARIMA
            """)

            st.markdown("### üî¨ Principe du Test")

            st.markdown("""
            <div class="formula-box">
            <h4>Mod√®le AR(1) g√©n√©ral:</h4>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"""
            X_t = \phi X_{t-1} + \varepsilon_t
            """)

            st.markdown("**Trois cas possibles:**")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("""
                <div class="success-box">
                <h4>|œÜ| < 1</h4>
                <p>‚úÖ Stationnaire</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="warning-box">
                <h4>œÜ = 1</h4>
                <p>‚ö†Ô∏è Racine unitaire<br>(Non-stationnaire)</p>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                st.markdown("""
                <div class="error-box">
                <h4>|œÜ| > 1</h4>
                <p>‚ùå Explosif</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")
            st.markdown("### üéØ Hypoth√®ses du Test")

            st.markdown("""
            <div class="info-box">
            <h4>Test de racine unitaire:</h4>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"""
            \begin{cases}
            H_0: \phi = 1 & \text{(Racine unitaire - Non-stationnaire)} \\
            H_1: |\phi| < 1 & \text{(Stationnaire)}
            \end{cases}
            """)

            st.markdown("""
            <div class="warning-box">
            <p><strong>‚ö†Ô∏è Important:</strong> Le test DF utilise une distribution particuli√®re
            (distribution de Dickey-Fuller) et NON la distribution de Student classique!</p>
            </div>
            """, unsafe_allow_html=True)

        with tab2:
            st.markdown("### üî¢ Les Trois Mod√®les de Dickey-Fuller")

            model_type = st.radio(
                "S√©lectionnez le mod√®le √† √©tudier:",
                ["Mod√®le 1: Sans constante ni tendance",
                 "Mod√®le 2: Avec constante",
                 "Mod√®le 3: Avec constante et tendance"],
                horizontal=False
            )

            if model_type == "Mod√®le 1: Sans constante ni tendance":
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le 1: Forme la plus simple</h4>
                <p>Utilis√© quand la s√©rie oscille autour de z√©ro sans tendance.</p>
                </div>
                """, unsafe_allow_html=True)

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("**Forme AR(1):**")
                    st.latex(r"""
                    X_t = \phi X_{t-1} + \varepsilon_t
                    """)

                with col2:
                    st.markdown("**Forme DF (diff√©rence):**")
                    st.latex(r"""
                    \Delta X_t = \gamma X_{t-1} + \varepsilon_t
                    """)

                st.markdown("**Relation:**")
                st.latex(r"""
                \gamma = \phi - 1
                """)

                st.markdown("**Hypoth√®ses:**")
                st.latex(r"""
                \begin{cases}
                H_0: \gamma = 0 & \text{(Racine unitaire)} \\
                H_1: \gamma < 0 & \text{(Stationnaire)}
                \end{cases}
                """)

                st.markdown("**Statistique de test:**")
                st.latex(r"""
                DF = \frac{\hat{\gamma}}{SE(\hat{\gamma})}
                """)

            elif model_type == "Mod√®le 2: Avec constante":
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le 2: Avec constante (drift)</h4>
                <p>Utilis√© pour les s√©ries avec une moyenne non nulle.</p>
                </div>
                """, unsafe_allow_html=True)

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("**Forme AR(1):**")
                    st.latex(r"""
                    X_t = c + \phi X_{t-1} + \varepsilon_t
                    """)

                with col2:
                    st.markdown("**Forme DF:**")
                    st.latex(r"""
                    \Delta X_t = c + \gamma X_{t-1} + \varepsilon_t
                    """)

                st.markdown("**Interpr√©tation de c:**")
                st.markdown("""
                - Si Œ≥ < 0 et c ‚â† 0 : la s√©rie est stationnaire autour d'une moyenne c/(1-œÜ)
                - Si Œ≥ = 0 et c ‚â† 0 : la s√©rie est une marche al√©atoire avec d√©rive
                """)

                st.markdown("**Hypoth√®ses:**")
                st.latex(r"""
                \begin{cases}
                H_0: \gamma = 0 & \text{(Racine unitaire avec d√©rive)} \\
                H_1: \gamma < 0 & \text{(Stationnaire autour d'une moyenne)}
                \end{cases}
                """)

            else:  # Mod√®le 3
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le 3: Avec constante et tendance</h4>
                <p>Utilis√© pour les s√©ries avec une tendance d√©terministe.</p>
                </div>
                """, unsafe_allow_html=True)

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("**Forme AR(1):**")
                    st.latex(r"""
                    X_t = c + \beta t + \phi X_{t-1} + \varepsilon_t
                    """)

                with col2:
                    st.markdown("**Forme DF:**")
                    st.latex(r"""
                    \Delta X_t = c + \beta t + \gamma X_{t-1} + \varepsilon_t
                    """)

                st.markdown("**Interpr√©tation:**")
                st.markdown("""
                - **c**: constante (intercept)
                - **Œ≤**: coefficient de tendance d√©terministe
                - **Œ≥**: coefficient de racine unitaire
                """)

                st.markdown("**Hypoth√®ses:**")
                st.latex(r"""
                \begin{cases}
                H_0: \gamma = 0 & \text{(Racine unitaire avec tendance)} \\
                H_1: \gamma < 0 & \text{(Stationnaire autour d'une tendance)}
                \end{cases}
                """)

            st.markdown("---")
            st.markdown("### üìä Tableau R√©capitulatif")

            recap_df = pd.DataFrame({
                'Mod√®le': ['Mod√®le 1', 'Mod√®le 2', 'Mod√®le 3'],
                '√âquation': [
                    'ŒîX‚Çú = Œ≥X‚Çú‚Çã‚ÇÅ + Œµ‚Çú',
                    'ŒîX‚Çú = c + Œ≥X‚Çú‚Çã‚ÇÅ + Œµ‚Çú',
                    'ŒîX‚Çú = c + Œ≤t + Œ≥X‚Çú‚Çã‚ÇÅ + Œµ‚Çú'
                ],
                'Usage': [
                    'S√©rie autour de 0',
                    'S√©rie avec moyenne',
                    'S√©rie avec tendance'
                ],
                'H‚ÇÄ': ['Œ≥ = 0', 'Œ≥ = 0', 'Œ≥ = 0'],
                'H‚ÇÅ': ['Œ≥ < 0', 'Œ≥ < 0', 'Œ≥ < 0']
            })

            st.dataframe(recap_df, use_container_width=True)

        with tab3:
            st.markdown("### üíª Application Pratique du Test DF")

            st.markdown("#### üìä G√©n√©ration de Donn√©es")

            col1, col2, col3 = st.columns(3)
            with col1:
                n_obs = st.slider("Nombre d'observations", 100, 500, 200, key='df_n')
            with col2:
                phi_val = st.slider("Valeur de œÜ", 0.5, 1.0, 0.95, 0.01, key='df_phi')
            with col3:
                const = st.slider("Constante (c)", 0.0, 5.0, 1.0, key='df_const')

            # Simulation
            np.random.seed(42)
            epsilon = np.random.normal(0, 1, n_obs)
            X = np.zeros(n_obs)
            X[0] = const

            for t in range(1, n_obs):
                X[t] = const + phi_val * X[t - 1] + epsilon[t]

            # Calcul des diff√©rences
            delta_X = np.diff(X)
            X_lag = X[:-1]

            # R√©gression
            from scipy import stats

            # Ajout de constante
            X_lag_with_const = np.column_stack([np.ones(len(X_lag)), X_lag])

            # R√©gression lin√©aire
            beta = np.linalg.lstsq(X_lag_with_const, delta_X, rcond=None)[0]
            c_hat = beta[0]
            gamma_hat = beta[1]

            # R√©sidus
            residuals = delta_X - (c_hat + gamma_hat * X_lag)

            # Erreur standard
            se_gamma = np.sqrt(np.sum(residuals ** 2) / (len(residuals) - 2)) / np.sqrt(
                np.sum((X_lag - np.mean(X_lag)) ** 2))

            # Statistique DF
            df_stat = gamma_hat / se_gamma

            # Affichage des r√©sultats
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìà S√©rie Temporelle")
                fig1 = go.Figure()
                fig1.add_trace(go.Scatter(y=X, mode='lines', name='X‚Çú', line=dict(color='blue')))
                fig1.update_layout(title='S√©rie Simul√©e', xaxis_title='Temps', yaxis_title='Valeur')
                st.plotly_chart(fig1, use_container_width=True)

            with col2:
                st.markdown("### üìâ Premi√®re Diff√©rence")
                fig2 = go.Figure()
                fig2.add_trace(go.Scatter(y=delta_X, mode='lines', name='ŒîX‚Çú', line=dict(color='red')))
                fig2.update_layout(title='Premi√®re Diff√©rence', xaxis_title='Temps', yaxis_title='ŒîX‚Çú')
                st.plotly_chart(fig2, use_container_width=True)

            st.markdown("### üìä R√©sultats du Test")

            results_df = pd.DataFrame({
                'Param√®tre': ['Constante estim√©e (ƒâ)', 'Coefficient estim√© (Œ≥ÃÇ)', 'Erreur standard SE(Œ≥ÃÇ)',
                              'Statistique DF', 'œÜ estim√©'],
                'Valeur': [c_hat, gamma_hat, se_gamma, df_stat, gamma_hat + 1]
            })

            st.dataframe(results_df.style.format({'Valeur': '{:.4f}'}), use_container_width=True)

            # Valeurs critiques (approximatives pour mod√®le 2)
            critical_values = {
                '1%': -3.43,
                '5%': -2.86,
                '10%': -2.57
            }

            st.markdown("### üéØ D√©cision")

            st.markdown(f"""
            <div class="formula-box">
            <p><strong>Statistique DF calcul√©e:</strong> {df_stat:.4f}</p>
            <p><strong>Valeurs critiques (Mod√®le 2):</strong></p>
            <ul>
                <li>1% : {critical_values['1%']}</li>
                <li>5% : {critical_values['5%']}</li>
                <li>10% : {critical_values['10%']}</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            if df_stat < critical_values['5%']:
                st.markdown("""
                <div class="success-box">
                <h4>‚úÖ Conclusion: Rejet de H‚ÇÄ</h4>
                <p>La s√©rie est <strong>STATIONNAIRE</strong> au seuil de 5%</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ö†Ô∏è Conclusion: Non-rejet de H‚ÇÄ</h4>
                <p>La s√©rie contient une <strong>RACINE UNITAIRE</strong> (non-stationnaire)</p>
                </div>
                """, unsafe_allow_html=True)

        with tab4:
            st.markdown("### üéØ Guide d'Interpr√©tation")

            st.markdown("""
            <div class="info-box">
            <h4>üìã √âtapes d'Interpr√©tation du Test DF</h4>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("#### 1Ô∏è‚É£ **Formulation des Hypoth√®ses**")
            st.latex(r"""
            \begin{cases}
            H_0: \gamma = 0 & \text{(Pr√©sence de racine unitaire)} \\
            H_1: \gamma < 0 & \text{(Pas de racine unitaire)}
            \end{cases}
            """)

            st.markdown("#### 2Ô∏è‚É£ **Calcul de la Statistique de Test**")
            st.latex(r"""
            DF = \frac{\hat{\gamma}}{SE(\hat{\gamma})}
            """)

            st.markdown("#### 3Ô∏è‚É£ **Comparaison avec les Valeurs Critiques**")

            st.markdown("""
            <div class="warning-box">
            <p><strong>‚ö†Ô∏è Attention:</strong> Les valeurs critiques du test DF sont diff√©rentes
            de celles de la distribution de Student!</p>
            </div>
            """, unsafe_allow_html=True)

            # Tableau des valeurs critiques
            st.markdown("##### Valeurs Critiques de Dickey-Fuller")

            cv_df = pd.DataFrame({
                'Mod√®le': ['Mod√®le 1', 'Mod√®le 2', 'Mod√®le 3'],
                '1%': [-2.58, -3.43, -3.96],
                '5%': [-1.95, -2.86, -3.41],
                '10%': [-1.62, -2.57, -3.12]
            })

            st.dataframe(cv_df, use_container_width=True)

            st.markdown("#### 4Ô∏è‚É£ **R√®gle de D√©cision**")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                <div class="success-box">
                <h4>‚úÖ Si DF < Valeur Critique</h4>
                <p><strong>Rejet de H‚ÇÄ</strong></p>
                <p>‚û°Ô∏è S√©rie STATIONNAIRE</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ö†Ô∏è Si DF ‚â• Valeur Critique</h4>
                <p><strong>Non-rejet de H‚ÇÄ</strong></p>
                <p>‚û°Ô∏è S√©rie NON-STATIONNAIRE</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")
            st.markdown("### üîç Exemples Pratiques")

            example = st.selectbox(
                "Choisissez un exemple:",
                ["Exemple 1: S√©rie Stationnaire",
                 "Exemple 2: Marche Al√©atoire",
                 "Exemple 3: S√©rie avec Tendance"]
            )

            if example == "Exemple 1: S√©rie Stationnaire":
                st.markdown("""
                **Donn√©es:** Prix d'un produit autour d'une moyenne stable

                **R√©sultat du test:**
                - Statistique DF = -4.25
                - Valeur critique (5%) = -2.86

                **Interpr√©tation:**
                """)

                st.latex(r"-4.25 < -2.86 \Rightarrow \text{Rejet de } H_0")

                st.markdown("""
                <div class="success-box">
                <p><strong>Conclusion:</strong> La s√©rie est stationnaire.
                On peut utiliser directement des mod√®les ARMA.</p>
                </div>
                """, unsafe_allow_html=True)

            elif example == "Exemple 2: Marche Al√©atoire":
                st.markdown("""
                **Donn√©es:** Prix d'une action en bourse

                **R√©sultat du test:**
                - Statistique DF = -1.52
                - Valeur critique (5%) = -2.86

                **Interpr√©tation:**
                """)

                st.latex(r"-1.52 > -2.86 \Rightarrow \text{Non-rejet de } H_0")

                st.markdown("""
                <div class="warning-box">
                <p><strong>Conclusion:</strong> La s√©rie contient une racine unitaire.
                Il faut diff√©rencier la s√©rie avant mod√©lisation.</p>
                </div>
                """, unsafe_allow_html=True)

            else:
                st.markdown("""
                **Donn√©es:** PIB avec tendance croissante

                **R√©sultat du test (Mod√®le 3):**
                - Statistique DF = -2.95
                - Valeur critique (5%) = -3.41

                **Interpr√©tation:**
                """)

                st.latex(r"-2.95 > -3.41 \Rightarrow \text{Non-rejet de } H_0")

                st.markdown("""
                <div class="info-box">
                <p><strong>Conclusion:</strong> Pr√©sence de racine unitaire avec tendance.
                Diff√©renciation n√©cessaire ou retrait de la tendance.</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")
            st.markdown("### ‚ö†Ô∏è Limites du Test DF")

            st.markdown("""
            1. **Puissance faible** pour des √©chantillons de petite taille
            2. **Sensible √† la sp√©cification** du mod√®le (choix entre mod√®les 1, 2, 3)
            3. **Hypoth√®se** que les erreurs sont un bruit blanc (pas d'autocorr√©lation)
            4. **Solution:** Utiliser le test ADF (Augmented Dickey-Fuller) pour g√©rer l'autocorr√©lation
            """)

    # ========== SECTION 2.3 ==========
    elif section_ch2 == "2.3 - Test ADF (Augmented Dickey-Fuller)":
        st.markdown('<p class="sub-header">2.3 - Test ADF (Augmented Dickey-Fuller)</p>', unsafe_allow_html=True)

        tab1, tab2, tab3, tab4 = st.tabs(
            ["üìö Th√©orie", "üî¢ Mod√®les ADF", "üíª Application Python", "üìä Comparaison DF vs ADF"])

        with tab1:
            st.markdown("""
            <div class="info-box">
            <h3>üéØ Pourquoi le Test ADF?</h3>
            <p>Le test DF suppose que les erreurs sont un <strong>bruit blanc</strong> (pas d'autocorr√©lation).</p>
            <p>Le test ADF <strong>relaxe cette hypoth√®se</strong> en ajoutant des termes de retard.</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìñ Probl√®me du Test DF Simple")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                <div class="warning-box">
                <h4>‚ùå Test DF</h4>
                <p><strong>Hypoth√®se stricte:</strong></p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \varepsilon_t
                """)

                st.markdown("O√π **Œµ‚Çú ~ BB(0, œÉ¬≤)** (bruit blanc)")

                st.markdown("""
                **Probl√®me:** Si Œµ‚Çú est autocorr√©l√©, le test est biais√©!
                """)

            with col2:
                st.markdown("""
                <div class="success-box">
                <h4>‚úÖ Test ADF</h4>
                <p><strong>Hypoth√®se relax√©e:</strong></p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \sum_{i=1}^{p} \beta_i \Delta X_{t-i} + \varepsilon_t
                """)

                st.markdown("Ajout de **p retards** de ŒîX‚Çú pour capturer l'autocorr√©lation")

            st.markdown("---")
            st.markdown("### üî¨ Principe du Test ADF")

            st.markdown("""
            <div class="formula-box">
            <h4>L'id√©e cl√©:</h4>
            <p>Ajouter des termes de diff√©rences retard√©es pour \"nettoyer\" l'autocorr√©lation dans les r√©sidus.</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("**Mod√®le g√©n√©ral ADF:**")
            st.latex(r"""
            \Delta X_t = c + \beta t + \gamma X_{t-1} + \beta_1 \Delta X_{t-1} + \beta_2 \Delta X_{t-2} + \cdots + \beta_p \Delta X_{t-p} + \varepsilon_t
            """)

            st.markdown("**Composantes:**")
            st.markdown("""
            - **c**: constante (drift)
            - **Œ≤t**: tendance d√©terministe (optionnelle)
            - **Œ≥X‚Çú‚Çã‚ÇÅ**: terme de racine unitaire (√† tester)
            - **Œ≤·µ¢ŒîX‚Çú‚Çã·µ¢**: termes de correction pour autocorr√©lation
            - **Œµ‚Çú**: terme d'erreur (bruit blanc)
            """)

            st.markdown("### üéØ Hypoth√®ses du Test")

            st.latex(r"""
            \begin{cases}
            H_0: \gamma = 0 & \text{(Racine unitaire - S√©rie non-stationnaire)} \\
            H_1: \gamma < 0 & \text{(Pas de racine unitaire - S√©rie stationnaire)}
            \end{cases}
            """)

            st.markdown("""
            <div class="warning-box">
            <p><strong>‚ö†Ô∏è Important:</strong> Les hypoth√®ses sont les m√™mes que pour le test DF,
            mais le test ADF est plus robuste!</p>
            </div>
            """, unsafe_allow_html=True)

        with tab2:
            st.markdown("### üî¢ Les Trois Mod√®les ADF")

            adf_model = st.radio(
                "S√©lectionnez le mod√®le ADF:",
                ["Mod√®le 1: Sans constante ni tendance",
                 "Mod√®le 2: Avec constante",
                 "Mod√®le 3: Avec constante et tendance"],
                horizontal=False
            )

            if adf_model == "Mod√®le 1: Sans constante ni tendance":
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le ADF 1</h4>
                <p>Pour une s√©rie oscillant autour de z√©ro sans d√©rive ni tendance.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = \gamma X_{t-1} + \sum_{i=1}^{p} \beta_i \Delta X_{t-i} + \varepsilon_t
                """)

                st.markdown("**Forme d√©velopp√©e (p=2):**")
                st.latex(r"""
                \Delta X_t = \gamma X_{t-1} + \beta_1 \Delta X_{t-1} + \beta_2 \Delta X_{t-2} + \varepsilon_t
                """)

            elif adf_model == "Mod√®le 2: Avec constante":
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le ADF 2</h4>
                <p>Pour une s√©rie avec une moyenne non nulle (pr√©sence de drift).</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \sum_{i=1}^{p} \beta_i \Delta X_{t-i} + \varepsilon_t
                """)

                st.markdown("**Forme d√©velopp√©e (p=3):**")
                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \beta_1 \Delta X_{t-1} + \beta_2 \Delta X_{t-2} + \beta_3 \Delta X_{t-3} + \varepsilon_t
                """)

            else:  # Mod√®le 3
                st.markdown("""
                <div class="info-box">
                <h4>üìê Mod√®le ADF 3</h4>
                <p>Pour une s√©rie avec une tendance d√©terministe.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \beta t + \gamma X_{t-1} + \sum_{i=1}^{p} \beta_i \Delta X_{t-i} + \varepsilon_t
                """)

                st.markdown("**Forme d√©velopp√©e (p=2):**")
                st.latex(r"""
                \Delta X_t = c + \beta t + \gamma X_{t-1} + \beta_1 \Delta X_{t-1} + \beta_2 \Delta X_{t-2} + \varepsilon_t
                """)

            st.markdown("---")
            st.markdown("### üîç Choix du Nombre de Retards (p)")

            st.markdown("""
            <div class="warning-box">
            <h4>‚ö†Ô∏è Question cruciale: Comment choisir p?</h4>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("**M√©thodes courantes:**")

            methods_df = pd.DataFrame({
                'M√©thode': ['AIC (Akaike)', 'BIC (Schwarz)', 'R√®gle empirique', 'ACF/PACF'],
                'Formule/Crit√®re': [
                    'AIC = -2log(L) + 2k',
                    'BIC = -2log(L) + k¬∑log(n)',
                    'p ‚âà 12(n/100)^(1/4)',
                    'Analyse graphique'
                ],
                'Caract√©ristique': [
                    'Minimise AIC',
                    'Plus parcimonieux',
                    'Simple',
                    'Visuelle'
                ]
            })

            st.dataframe(methods_df, use_container_width=True)

            st.markdown("""
            **Recommandations:**
            - **AIC**: Tend √† s√©lectionner plus de param√®tres
            - **BIC**: Tend √† s√©lectionner moins de param√®tres (pr√©f√©r√© pour grands √©chantillons)
            - **Pratique courante**: Tester plusieurs valeurs et comparer
            """)

        with tab3:
            st.markdown("### üíª Application avec Python (statsmodels)")

            st.markdown("#### üìä G√©n√©ration de Donn√©es")

            col1, col2, col3 = st.columns(3)

            with col1:
                n_sample = st.slider("Nombre d'observations", 100, 500, 200, key='adf_n')
            with col2:
                phi_param = st.slider("œÜ (AR coefficient)", 0.7, 1.0, 0.98, 0.01, key='adf_phi')
            with col3:
                ar_order = st.slider("Ordre AR additionnel", 0, 3, 1, key='adf_ar')

            # Simulation d'un processus AR
            np.random.seed(42)

            # G√©n√©rer un processus avec structure AR
            from scipy import signal

            # Coefficients AR
            ar_coef = [1, -phi_param]
            if ar_order > 0:
                for i in range(ar_order):
                    ar_coef.append(np.random.uniform(-0.2, 0.2))

            # Simulation
            white_noise = np.random.normal(0, 1, n_sample + 100)
            X_series = signal.lfilter([1], ar_coef, white_noise)[100:]

            # Affichage de la s√©rie
            st.markdown("#### üìà S√©rie Temporelle G√©n√©r√©e")

            fig_series = go.Figure()
            fig_series.add_trace(go.Scatter(y=X_series, mode='lines', name='S√©rie', line=dict(color='blue')))
            fig_series.update_layout(
                title=f'S√©rie Simul√©e (œÜ={phi_param})',
                xaxis_title='Temps',
                yaxis_title='Valeur',
                height=400
            )
            st.plotly_chart(fig_series, use_container_width=True)

            # Application du test ADF
            st.markdown("#### üß™ Test ADF avec statsmodels")

            # Choix des param√®tres du test
            col1, col2 = st.columns(2)

            with col1:
                regression_type = st.selectbox(
                    "Type de r√©gression:",
                    ['c', 'ct', 'ctt', 'n'],
                    format_func=lambda x: {
                        'c': 'Constante seule',
                        'ct': 'Constante + Tendance',
                        'ctt': 'Constante + Tendance + Tendance¬≤',
                        'n': 'Aucune'
                    }[x]
                )

            with col2:
                max_lag = st.slider("Nombre maximum de retards", 0, 10, 5, key='adf_maxlag')

            # Code Python √† afficher
            st.markdown("**Code Python:**")

            code = f"""
from statsmodels.tsa.stattools import adfuller

# Application du test ADF
result = adfuller(X_series,
                 maxlag={max_lag},
                 regression='{regression_type}',
                 autolag='AIC')

# Extraction des r√©sultats
adf_statistic = result[0]
p_value = result[1]
used_lag = result[2]
n_obs = result[3]
critical_values = result[4]
ic_best = result[5]

print(f"Statistique ADF: {{adf_statistic:.4f}}")
print(f"p-value: {{p_value:.4f}}")
print(f"Nombre de retards utilis√©s: {{used_lag}}")
print(f"Nombre d'observations: {{n_obs}}")
print("Valeurs critiques:")
for key, value in critical_values.items():
    print(f"  {{key}}: {{value:.4f}}")
"""

            st.code(code, language='python')

            # Ex√©cution r√©elle du test
            try:
                result = adfuller(X_series, maxlag=max_lag, regression=regression_type, autolag='AIC')

                adf_stat = result[0]
                p_val = result[1]
                used_lag = result[2]
                nobs = result[3]
                crit_vals = result[4]

                st.markdown("#### üìä R√©sultats du Test ADF")

                # M√©triques principales
                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    st.metric("Statistique ADF", f"{adf_stat:.4f}")
                with col2:
                    st.metric("p-value", f"{p_val:.4f}")
                with col3:
                    st.metric("Retards utilis√©s", used_lag)
                with col4:
                    st.metric("Observations", nobs)

                # Valeurs critiques
                st.markdown("**Valeurs Critiques:**")

                crit_df = pd.DataFrame({
                    'Niveau': ['1%', '5%', '10%'],
                    'Valeur Critique': [crit_vals['1%'], crit_vals['5%'], crit_vals['10%']],
                    'Test': [
                        '‚úÖ Rejet' if adf_stat < crit_vals['1%'] else '‚ùå Non-rejet',
                        '‚úÖ Rejet' if adf_stat < crit_vals['5%'] else '‚ùå Non-rejet',
                        '‚úÖ Rejet' if adf_stat < crit_vals['10%'] else '‚ùå Non-rejet'
                    ]
                })

                st.dataframe(crit_df, use_container_width=True)

                # Interpr√©tation
                st.markdown("#### üéØ Interpr√©tation")

                if p_val < 0.05:
                    st.markdown("""
                    <div class="success-box">
                    <h4>‚úÖ R√©sultat: S√©rie STATIONNAIRE</h4>
                    <p>La p-value est inf√©rieure √† 0.05, nous rejetons H‚ÇÄ.</p>
                    <p>La s√©rie ne contient pas de racine unitaire.</p>
                    <p><strong>‚Üí La s√©rie peut √™tre utilis√©e directement pour la mod√©lisation ARMA.</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="warning-box">
                    <h4>‚ö†Ô∏è R√©sultat: S√©rie NON-STATIONNAIRE</h4>
                    <p>La p-value est sup√©rieure √† 0.05, nous ne rejetons pas H‚ÇÄ.</p>
                    <p>La s√©rie contient une racine unitaire.</p>
                    <p><strong>‚Üí Diff√©renciation n√©cessaire avant mod√©lisation.</strong></p>
                    </div>
                    """, unsafe_allow_html=True)

                # Si non-stationnaire, montrer la s√©rie diff√©renci√©e
                if p_val >= 0.05:
                    st.markdown("#### üìâ S√©rie Apr√®s Diff√©renciation")

                    X_diff = np.diff(X_series)

                    fig_diff = go.Figure()
                    fig_diff.add_trace(go.Scatter(y=X_diff, mode='lines', name='ŒîX', line=dict(color='red')))
                    fig_diff.update_layout(
                        title='S√©rie Diff√©renci√©e',
                        xaxis_title='Temps',
                        yaxis_title='ŒîX',
                        height=400
                    )
                    st.plotly_chart(fig_diff, use_container_width=True)

                    # Test ADF sur s√©rie diff√©renci√©e
                    result_diff = adfuller(X_diff, maxlag=max_lag, regression=regression_type, autolag='AIC')

                    st.markdown(f"""
                    **Test ADF sur la s√©rie diff√©renci√©e:**
                    - Statistique ADF: {result_diff[0]:.4f}
                    - p-value: {result_diff[1]:.4f}
                    """)

                    if result_diff[1] < 0.05:
                        st.markdown("""
                        <div class="success-box">
                        <p>‚úÖ La s√©rie diff√©renci√©e est stationnaire!</p>
                        <p>Ordre d'int√©gration: <strong>I(1)</strong></p>
                        </div>
                        """, unsafe_allow_html=True)

            except Exception as e:
                st.error(f"Erreur lors du test ADF: {str(e)}")

            # Guide d'utilisation
            st.markdown("---")
            st.markdown("### üìö Guide d'Utilisation du Test ADF")

            with st.expander("üîç √âtapes Pratiques"):
                st.markdown("""
                **1. Visualiser la s√©rie**
                   - Graphique de la s√©rie temporelle
                   - ACF et PACF

                **2. Choisir le mod√®le appropri√©**
                   - 'c': s√©rie avec moyenne constante
                   - 'ct': s√©rie avec tendance
                   - 'n': s√©rie centr√©e autour de z√©ro

                **3. Appliquer le test ADF**
                   - Utiliser autolag='AIC' pour s√©lection automatique
                   - Ou sp√©cifier maxlag manuellement

                **4. Interpr√©ter les r√©sultats**
                   - p-value < 0.05 ‚Üí stationnaire
                   - p-value ‚â• 0.05 ‚Üí non-stationnaire

                **5. Si non-stationnaire**
                   - Diff√©rencier la s√©rie
                   - Retester avec ADF
                   - R√©p√©ter jusqu'√† stationnarit√©
                """)

        with tab4:
            st.markdown("### üìä Comparaison: Test DF vs Test ADF")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                <div class="info-box">
                <h4>üìù Test DF (Dickey-Fuller)</h4>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \varepsilon_t
                """)

                st.markdown("""
                **Avantages:**
                - ‚úÖ Simple √† comprendre
                - ‚úÖ Peu de param√®tres √† estimer
                - ‚úÖ Rapide √† calculer

                **Inconv√©nients:**
                - ‚ùå Suppose Œµ‚Çú ~ bruit blanc
                - ‚ùå Peu robuste √† l'autocorr√©lation
                - ‚ùå Puissance faible si autocorr√©lation
                """)

            with col2:
                st.markdown("""
                <div class="success-box">
                <h4>üìù Test ADF (Augmented DF)</h4>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                \Delta X_t = c + \gamma X_{t-1} + \sum_{i=1}^{p}\beta_i \Delta X_{t-i} + \varepsilon_t
                """)

                st.markdown("""
                **Avantages:**
                - ‚úÖ Robuste √† l'autocorr√©lation
                - ‚úÖ Plus de puissance statistique
                - ‚úÖ G√®re les structures AR complexes

                **Inconv√©nients:**
                - ‚ùå Choix de p (nombre de retards)
                - ‚ùå Plus complexe
                - ‚ùå Perte d'observations
                """)

            st.markdown("---")
            st.markdown("### üî¨ Simulation Comparative")

            # Param√®tres de simulation
            col1, col2 = st.columns(2)

            with col1:
                n_sim = st.slider("Taille √©chantillon", 100, 500, 200, key='comp_n')
            with col2:
                autocorr_level = st.slider("Niveau d'autocorr√©lation", 0.0, 0.9, 0.5, key='comp_ar')

            # G√©n√©rer processus avec autocorr√©lation
            np.random.seed(42)
            noise = np.random.normal(0, 1, n_sim)

            # AR(1) process
            x_ar = np.zeros(n_sim)
            for t in range(1, n_sim):
                x_ar[t] = autocorr_level * x_ar[t - 1] + noise[t]

            # Random walk (non-stationnaire)
            x_rw = np.cumsum(noise)

            # Tests
            from statsmodels.tsa.stattools import adfuller

            # DF simple (maxlag=0)
            df_result_ar = adfuller(x_ar, maxlag=0, regression='c')
            df_result_rw = adfuller(x_rw, maxlag=0, regression='c')

            # ADF (autolag)
            adf_result_ar = adfuller(x_ar, regression='c', autolag='AIC')
            adf_result_rw = adfuller(x_rw, regression='c', autolag='AIC')

            # R√©sultats
            st.markdown("#### üìä R√©sultats de la Comparaison")

            results_comp = pd.DataFrame({
                'S√©rie': ['AR(1) - Stationnaire', 'AR(1) - Stationnaire',
                          'Random Walk - Non-stat', 'Random Walk - Non-stat'],
                'Test': ['DF', 'ADF', 'DF', 'ADF'],
                'Statistique': [df_result_ar[0], adf_result_ar[0],
                                df_result_rw[0], adf_result_rw[0]],
                'p-value': [df_result_ar[1], adf_result_ar[1],
                            df_result_rw[1], adf_result_rw[1]],
                'Retards': [0, adf_result_ar[2], 0, adf_result_rw[2]],
                'Conclusion': [
                    '‚úÖ Stationnaire' if df_result_ar[1] < 0.05 else '‚ùå Non-stat',
                    '‚úÖ Stationnaire' if adf_result_ar[1] < 0.05 else '‚ùå Non-stat',
                    '‚úÖ Stationnaire' if df_result_rw[1] < 0.05 else '‚ùå Non-stat',
                    '‚úÖ Stationnaire' if adf_result_rw[1] < 0.05 else '‚ùå Non-stat'
                ]
            })

            st.dataframe(results_comp.style.format({
                'Statistique': '{:.4f}',
                'p-value': '{:.4f}'
            }), use_container_width=True)

            st.markdown("""
            <div class="info-box">
            <h4>üí° Observations:</h4>
            <ul>
                <li>Le test ADF est g√©n√©ralement plus fiable en pr√©sence d'autocorr√©lation</li>
                <li>Pour les s√©ries simples, DF et ADF donnent des r√©sultats similaires</li>
                <li>Le test ADF ajuste automatiquement le nombre de retards n√©cessaires</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            # Recommandations
            st.markdown("---")
            st.markdown("### üí° Recommandations Pratiques")

            st.markdown("""
            | Situation | Test Recommand√© | Raison |
            |-----------|----------------|---------|
            | S√©rie simple, pas d'autocorr√©lation √©vidente | **DF** | Plus simple, suffisant |
            | Autocorr√©lation pr√©sente (ACF significatif) | **ADF** | Corrige l'autocorr√©lation |
            | Doute sur la structure | **ADF** | Plus robuste, s√©lection auto des retards |
            | Analyse professionnelle | **ADF** | Standard de l'industrie |
            | Donn√©es financi√®res | **ADF** | Structure souvent complexe |
            """)

            st.markdown("""
            <div class="success-box">
            <h4>‚úÖ Meilleure Pratique:</h4>
            <p><strong>Utiliser toujours le test ADF</strong> sauf si vous avez une raison sp√©cifique
            d'utiliser le test DF simple.</p>
            </div>
            """, unsafe_allow_html=True)

    # ========== SECTION 2.4 ==========
    elif section_ch2 == "2.4 - Processus ARIMA":
        st.markdown('<p class="sub-header">2.4 - Processus ARIMA</p>', unsafe_allow_html=True)

        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìö Th√©orie",
            "üî¢ Composantes ARIMA",
            "üéØ Identification",
            "üíª Application",
            "üìä Exemples R√©els"
        ])

        with tab1:
            st.markdown("""
            <div class="info-box">
            <h3>üéØ Qu'est-ce qu'un Processus ARIMA?</h3>
            <p><strong>ARIMA</strong> = AutoRegressive Integrated Moving Average</p>
            <p>Un mod√®le complet pour mod√©liser des s√©ries temporelles <strong>non-stationnaires</strong>.</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("### üìñ D√©finition")

            st.markdown("""
            <div class="formula-box">
            <p>Un processus ARIMA(p, d, q) combine:</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("""
                <div class="success-box">
                <h4>AR(p)</h4>
                <p><strong>AutoRegressive</strong></p>
                <p>D√©pendance aux valeurs pass√©es</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="info-box">
                <h4>I(d)</h4>
                <p><strong>Integrated</strong></p>
                <p>Ordre de diff√©renciation</p>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                st.markdown("""
                <div class="warning-box">
                <h4>MA(q)</h4>
                <p><strong>Moving Average</strong></p>
                <p>D√©pendance aux erreurs pass√©es</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")
            st.markdown("### üìê Notation ARIMA(p, d, q)")

            st.markdown("""
            - **p** : Ordre de la partie AutoR√©gressive (AR)
            - **d** : Ordre d'int√©gration (nombre de diff√©renciations)
            - **q** : Ordre de la partie Moyenne Mobile (MA)
            """)

            st.markdown("### üîÑ Du Non-Stationnaire au Stationnaire")

            st.markdown("""
            <div class="formula-box">
            <h4>Processus G√©n√©ral:</h4>
            </div>
            """, unsafe_allow_html=True)

            st.latex(r"""
            X_t \xrightarrow{\text{Diff√©renciation } d \text{ fois}} Y_t \sim ARMA(p, q)
            """)

            st.markdown("**√âtapes:**")

            st.latex(r"""
            \begin{align}
            &\text{1. S√©rie originale: } X_t \text{ (non-stationnaire)} \\
            &\text{2. Diff√©renciation: } Y_t = \Delta^d X_t = (1-L)^d X_t \\
            &\text{3. Mod√®le ARMA: } \phi(L) Y_t = \theta(L) \varepsilon_t
            \end{align}
            """)

            st.markdown("---")
            st.markdown("### üìä Cas Particuliers")

            cases_df = pd.DataFrame({
                'Mod√®le': ['ARIMA(p,0,0)', 'ARIMA(0,0,q)', 'ARIMA(p,0,q)', 'ARIMA(0,1,0)', 'ARIMA(0,d,0)'],
                '√âquivalent': ['AR(p)', 'MA(q)', 'ARMA(p,q)', 'Random Walk', 'I(d)'],
                'Description': [
                    'Processus purement autor√©gressif',
                    'Processus purement moyenne mobile',
                    'ARMA stationnaire',
                    'Marche al√©atoire',
                    'Processus int√©gr√© d ordre'
                ]
            })

            st.dataframe(cases_df, use_container_width=True)

        with tab2:
            st.markdown("### üî¢ D√©tails des Composantes ARIMA")

            component = st.selectbox(
                "Choisissez une composante √† explorer:",
                ["Composante AR (p)", "Composante I (d)", "Composante MA (q)", "Combinaison Compl√®te"]
            )

            if component == "Composante AR (p)":
                st.markdown("""
                <div class="info-box">
                <h4>üìà Partie AutoR√©gressive AR(p)</h4>
                <p>La valeur actuelle d√©pend de ses <strong>p valeurs pass√©es</strong>.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \cdots + \phi_p X_{t-p} + \varepsilon_t
                """)

                st.markdown("**Forme op√©rateur:**")
                st.latex(r"""
                \phi(L) X_t = \varepsilon_t
                """)

                st.markdown("O√π:")
                st.latex(r"""
                \phi(L) = 1 - \phi_1 L - \phi_2 L^2 - \cdots - \phi_p L^p
                """)

                st.markdown("**Exemples:**")

                with st.expander("AR(1)"):
                    st.latex(r"X_t = \phi_1 X_{t-1} + \varepsilon_t")
                    st.markdown("- Processus de premier ordre")
                    st.markdown("- M√©moire courte")
                    st.markdown("- Stationnaire si |œÜ‚ÇÅ| < 1")

                with st.expander("AR(2)"):
                    st.latex(r"X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \varepsilon_t")
                    st.markdown("- Peut g√©n√©rer des cycles")
                    st.markdown("- Conditions de stationnarit√© plus complexes")

                # PACF
                st.markdown("**üìä Identification via PACF:**")
                st.markdown("""
                - PACF se coupe apr√®s le retard **p**
                - ACF d√©cro√Æt exponentiellement
                """)

            elif component == "Composante I (d)":
                st.markdown("""
                <div class="info-box">
                <h4>üîÑ Partie Int√©gration I(d)</h4>
                <p>Nombre de <strong>diff√©renciations</strong> n√©cessaires pour rendre la s√©rie stationnaire.</p>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("**Op√©rateur de diff√©rence:**")
                st.latex(r"""
                \Delta X_t = X_t - X_{t-1} = (1-L) X_t
                """)

                st.markdown("**Diff√©renciation d'ordre d:**")
                st.latex(r"""
                \Delta^d X_t = (1-L)^d X_t
                """)

                st.markdown("**Exemples:**")

                col1, col2, col3 = st.columns(3)

                with col1:
                    st.markdown("**d = 0**")
                    st.latex(r"Y_t = X_t")
                    st.markdown("S√©rie d√©j√† stationnaire")

                with col2:
                    st.markdown("**d = 1**")
                    st.latex(r"Y_t = \Delta X_t")
                    st.markdown("Une diff√©renciation")

                with col3:
                    st.markdown("**d = 2**")
                    st.latex(r"Y_t = \Delta^2 X_t")
                    st.markdown("Deux diff√©renciations")

                st.markdown("---")
                st.markdown("**üìä D√©termination de d:**")

                st.markdown("""
                1. **Test ADF** sur la s√©rie originale
                   - Si non-stationnaire ‚Üí diff√©rencier
                2. **Test ADF** sur la s√©rie diff√©renci√©e
                   - Si stationnaire ‚Üí d = 1
                   - Si non ‚Üí continuer
                3. **R√©p√©ter** jusqu'√† stationnarit√©

                <div class="warning-box">
                <p><strong>‚ö†Ô∏è Attention:</strong> Rarement d > 2 dans la pratique!</p>
                </div>
                """, unsafe_allow_html=True)

            elif component == "Composante MA (q)":
                st.markdown("""
                <div class="info-box">
                <h4>üìâ Partie Moyenne Mobile MA(q)</h4>
                <p>La valeur actuelle d√©pend des <strong>q erreurs pass√©es</strong>.</p>
                </div>
                """, unsafe_allow_html=True)

                st.latex(r"""
                X_t = \varepsilon_t + \theta_1 \varepsilon_{t-1} + \theta_2 \varepsilon_{t-2} + \cdots + \theta_q \varepsilon_{t-q}
                """)

                st.markdown("**Forme op√©rateur:**")
                st.latex(r"""
                X_t = \theta(L) \varepsilon_t
                """)

                st.markdown("O√π:")
                st.latex(r"""
                \theta(L) = 1 + \theta_1 L + \theta_2 L^2 + \cdots + \theta_q L^q
                """)

                st.markdown("**Exemples:**")

                with st.expander("MA(1)"):
                    st.latex(r"X_t = \varepsilon_t + \theta_1 \varepsilon_{t-1}")
                    st.markdown("- M√©moire tr√®s courte (1 p√©riode)")
                    st.markdown("- Toujours stationnaire")
                    st.markdown("- Invertible si |Œ∏‚ÇÅ| < 1")

                with st.expander("MA(2)"):
                    st.latex(r"X_t = \varepsilon_t + \theta_1 \varepsilon_{t-1} + \theta_2 \varepsilon_{t-2}")
                    st.markdown("- M√©moire de 2 p√©riodes")
                    st.markdown("- Conditions d'invertibilit√© plus complexes")

                # ACF
                st.markdown("**üìä Identification via ACF:**")
                st.markdown("""
                - ACF se coupe apr√®s le retard **q**
                - PACF d√©cro√Æt exponentiellement
                """)

            else:  # Combinaison compl√®te
                st.markdown("""
                <div class="success-box">
                <h4>üéØ Mod√®le ARIMA(p,d,q) Complet</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("### üìê Formulation Math√©matique")

                st.latex(r"""
                \phi(L)(1-L)^d X_t = \theta(L) \varepsilon_t
                """)

                st.markdown("**D√©velopp√©:**")
                st.latex(r"""
                (1 - \phi_1 L - \cdots - \phi_p L^p)(1-L)^d X_t = (1 + \theta_1 L + \cdots + \theta_q L^q) \varepsilon_t
                """)

                st.markdown("---")
                st.markdown("### üîç Exemple: ARIMA(1,1,1)")

                st.markdown("**√âtape 1: Diff√©renciation**")
                st.latex(r"Y_t = \Delta X_t = X_t - X_{t-1}")

                st.markdown("**√âtape 2: Mod√®le ARMA(1,1) sur Y‚Çú**")
                st.latex(r"Y_t = \phi_1 Y_{t-1} + \varepsilon_t + \theta_1 \varepsilon_{t-1}")

                st.markdown("**Forme d√©velopp√©e:**")
                st.latex(r"""
                X_t - X_{t-1} = \phi_1(X_{t-1} - X_{t-2}) + \varepsilon_t + \theta_1 \varepsilon_{t-1}
                """)

                st.latex(r"""
                X_t = (1+\phi_1)X_{t-1} - \phi_1 X_{t-2} + \varepsilon_t + \theta_1 \varepsilon_{t-1}
                """)

        with tab3:
            st.markdown("### üéØ M√©thodologie d'Identification ARIMA")

            st.markdown("""
            <div class="info-box">
            <h4>üìã Approche de Box-Jenkins</h4>
            <p>M√©thodologie syst√©matique en 4 √©tapes pour identifier un mod√®le ARIMA.</p>
            </div>
            """, unsafe_allow_html=True)

            # √âtapes
            step = st.radio(
                "S√©lectionnez une √©tape:",
                ["√âtape 1: Identification de d",
                 "√âtape 2: Identification de p et q",
                 "√âtape 3: Estimation",
                 "√âtape 4: Validation"],
                horizontal=False
            )

            if step == "√âtape 1: Identification de d":
                st.markdown("""
                <div class="formula-box">
                <h4>üîç D√©terminer l'Ordre de Diff√©renciation (d)</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("**M√©thode 1: Test ADF**")

                st.markdown(r"""
                ```
                1. Appliquer le test ADF sur X‚Çú
                   - Si stationnaire ‚Üí d = 0
                   - Sinon ‚Üí continuer

                2. Calculer ŒîX‚Çú et appliquer ADF
                   - Si stationnaire ‚Üí d = 1
                   - Sinon ‚Üí continuer

                3. Calculer Œî¬≤X‚Çú et appliquer ADF
                   - Si stationnaire ‚Üí d = 2
                ```
                """)

                st.markdown("**M√©thode 2: Analyse ACF**")

                st.markdown("""
                - **d = 0**: ACF d√©cro√Æt rapidement vers 0
                - **d = 1**: ACF d√©cro√Æt tr√®s lentement (proche de 1)
                - **d = 2**: ACF d√©cro√Æt lin√©airement
                """)

                st.markdown("**M√©thode 3: Visualisation**")

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("""
                    **S√©rie n√©cessitant d=0:**
                    - Oscille autour d'une moyenne
                    - Variance constante
                    - Pas de tendance claire
                    """)

                with col2:
                    st.markdown("""
                    **S√©rie n√©cessitant d‚â•1:**
                    - Tendance claire
                    - Variance croissante
                    - Pas de r√©version √† la moyenne
                    """)

            elif step == "√âtape 2: Identification de p et q":
                st.markdown("""
                <div class="formula-box">
                <h4>üîç D√©terminer les Ordres p et q</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("**Sur la s√©rie stationnaire Y‚Çú = Œî·µà X‚Çú:**")

                st.markdown("### üìä Analyse ACF et PACF")

                # Tableau de d√©cision
                decision_df = pd.DataFrame({
                    'Mod√®le': ['AR(p)', 'MA(q)', 'ARMA(p,q)'],
                    'ACF': [
                        'D√©cro√Æt exponentiellement ou sinuso√Ødalement',
                        'Se coupe apr√®s le retard q',
                        'D√©cro√Æt exponentiellement'
                    ],
                    'PACF': [
                        'Se coupe apr√®s le retard p',
                        'D√©cro√Æt exponentiellement ou sinuso√Ødalement',
                        'D√©cro√Æt exponentiellement'
                    ],
                    'Identification': [
                        'p = dernier pic significatif du PACF',
                        'q = dernier pic significatif de l\'ACF',
                        'Plusieurs mod√®les possibles'
                    ]
                })

                st.dataframe(decision_df, use_container_width=True)

                st.markdown("---")
                st.markdown("### üìà Crit√®res d'Information")

                st.markdown("""
                Quand plusieurs mod√®les sont possibles, comparer avec:
                """)

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("**AIC (Akaike)**")
                    st.latex(r"AIC = -2\ln(L) + 2k")
                    st.markdown("- k = nombre de param√®tres")
                    st.markdown("- Choisir le mod√®le avec AIC minimal")

                with col2:
                    st.markdown("**BIC (Bay√©sien)**")
                    st.latex(r"BIC = -2\ln(L) + k\ln(n)")
                    st.markdown("- n = nombre d'observations")
                    st.markdown("- P√©nalise plus les mod√®les complexes")

            elif step == "√âtape 3: Estimation":
                st.markdown("""
                <div class="formula-box">
                <h4>üîç Estimation des Param√®tres</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("**M√©thodes d'Estimation:**")

                st.markdown("### 1Ô∏è‚É£ Maximum de Vraisemblance (ML)")

                st.latex(r"""
                \hat{\theta} = \arg\max L(\theta | X_1, \ldots, X_n)
                """)

                st.markdown("- M√©thode la plus utilis√©e")
                st.markdown("- Propri√©t√©s asymptotiques optimales")
                st.markdown("- Impl√©mentation dans statsmodels, R, etc.")

                st.markdown("### 2Ô∏è‚É£ Moindres Carr√©s (LS)")

                st.latex(r"""
                \hat{\theta} = \arg\min \sum_{t=1}^{n} \varepsilon_t^2
                """)

                st.markdown("- Plus simple computationnellement")
                st.markdown("- √âquivalent √† ML pour mod√®les gaussiens")

                st.markdown("---")
                st.markdown("### üìä V√©rification des Param√®tres")

                st.markdown("""
                **Tests de significativit√©:**
                """)

                st.latex(r"""
                t = \frac{\hat{\phi}_i}{SE(\hat{\phi}_i)} \sim t_{n-k}
                """)

                st.markdown("""
                - Si |t| > valeur critique ‚Üí param√®tre significatif
                - Sinon ‚Üí envisager un mod√®le plus parcimonieux
                """)

            else:  # √âtape 4
                st.markdown("""
                <div class="formula-box">
                <h4>üîç Validation du Mod√®le (Diagnostic)</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("### ‚úÖ Tests sur les R√©sidus")

                st.markdown("**1. Test de Blancheur (Ljung-Box)**")

                st.latex(r"""
                Q = n(n+2)\sum_{k=1}^{h} \frac{\hat{\rho}_k^2}{n-k} \sim \chi^2_{h-p-q}
                """)

                st.markdown("""
                - H‚ÇÄ: Les r√©sidus sont un bruit blanc
                - Si p-value > 0.05 ‚Üí r√©sidus non corr√©l√©s ‚úÖ
                """)

                st.markdown("**2. Test de Normalit√© (Jarque-Bera)**")

                st.latex(r"""
                JB = \frac{n}{6}\left(S^2 + \frac{(K-3)^2}{4}\right) \sim \chi^2_2
                """)

                st.markdown("- S: skewness (asym√©trie)")
                st.markdown("- K: kurtosis (aplatissement)")

                st.markdown("**3. Tests d'Homosc√©dasticit√©**")

                st.markdown("""
                - Test ARCH
                - Test de Breusch-Pagan
                - Graphique des r√©sidus au carr√©
                """)

                st.markdown("---")
                st.markdown("### üìä Crit√®res de Validation")

                validation_criteria = pd.DataFrame({
                    'Crit√®re': [
                        'Ljung-Box p-value',
                        'Normalit√© des r√©sidus',
                        'AIC/BIC',
                        'R¬≤ ajust√©',
                        'Graphiques r√©siduels'
                    ],
                    'Bon Mod√®le': [
                        '> 0.05',
                        'p-value > 0.05',
                        'Minimal',
                        '√âlev√©',
                        'Pas de pattern'
                    ],
                    'Action si Mauvais': [
                        'Augmenter p ou q',
                        'Transformation donn√©es',
                        'Essayer autre mod√®le',
                        'R√©viser mod√®le',
                        'R√©viser sp√©cification'
                    ]
                })

                st.dataframe(validation_criteria, use_container_width=True)

            # Flowchart
            st.markdown("---")
            st.markdown("### üîÑ Diagramme de la M√©thodologie")

            st.markdown(r"""
            ```
            1. VISUALISATION
                ‚Üì
            2. TEST DE STATIONNARIT√â (ADF)
                ‚Üì
            3a. Si Stationnaire        3b. Si Non-Stationnaire
                ‚Üí d = 0                     ‚Üí Diff√©rencier
                ‚Üì                           ‚Üì
            4. ANALYSE ACF/PACF             Retour √† (2)
                ‚Üì
            5. PROPOSITION DE MOD√àLES (p,q)
                ‚Üì
            6. ESTIMATION DES PARAM√àTRES
                ‚Üì
            7. DIAGNOSTIC DES R√âSIDUS
                ‚Üì
            8a. R√©sidus OK             8b. R√©sidus Probl√©matiques
                ‚Üí VALIDATION                ‚Üí Retour √† (5)
                ‚Üì
            9. PR√âVISION
            ```
            """)

        with tab4:
            st.markdown("### üíª Application Compl√®te ARIMA avec Python")

            # Options de donn√©es
            data_source = st.radio(
                "Source de donn√©es:",
                ["Donn√©es Simul√©es", "T√©l√©charger vos donn√©es"],
                horizontal=True
            )

            series_data = None  # Initialize to None

            if data_source == "Donn√©es Simul√©es":
                st.markdown("#### üé≤ Simulation ARIMA")

                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    sim_n = st.slider("Observations", 100, 500, 200, key='arima_sim_n')
                with col2:
                    sim_p = st.slider("p", 0, 3, 1, key='arima_p')
                with col3:
                    sim_d = st.slider("d", 0, 2, 1, key='arima_d')
                with col4:
                    sim_q = st.slider("q", 0, 3, 1, key='arima_q')

                # Simulation
                np.random.seed(42)

                # Param√®tres AR et MA
                ar_params = np.array([1] + [-0.5] * sim_p if sim_p > 0 else [1])
                ma_params = np.array([1] + [0.3] * sim_q if sim_q > 0 else [1])

                # G√©n√©rer ARMA
                arma_process = ArmaProcess(ar_params, ma_params)
                y_stationary = arma_process.generate_sample(nsample=sim_n + 100)[100:]

                # Int√©gration (si d > 0)
                y_series = y_stationary.copy()
                for _ in range(sim_d):
                    y_series = np.cumsum(y_series) + np.random.normal(0, 0.1)  # Add small drift

                series_data = pd.Series(y_series)

            else:
                uploaded_file = st.file_uploader("T√©l√©charger un fichier CSV", type=['csv'])

                if uploaded_file is not None:
                    df_uploaded = pd.read_csv(uploaded_file)
                    st.dataframe(df_uploaded.head())

                    col_name = st.selectbox("S√©lectionnez la colonne:", df_uploaded.columns)
                    if col_name:
                        series_data = pd.to_numeric(df_uploaded[col_name], errors='coerce').dropna()
                else:
                    st.warning("Veuillez t√©l√©charger un fichier CSV")

            if series_data is not None and not series_data.empty:
                # Visualisation
                st.markdown("#### üìà S√©rie Temporelle")

                fig_ts = go.Figure()
                fig_ts.add_trace(go.Scatter(y=series_data, mode='lines', name='S√©rie'))
                fig_ts.update_layout(title='S√©rie Temporelle', xaxis_title='Temps', yaxis_title='Valeur', height=400)
                st.plotly_chart(fig_ts, use_container_width=True)

                # Analyse de stationnarit√©
                st.markdown("#### üîç Analyse de Stationnarit√©")

                adf_result = adfuller(series_data)

                col1, col2 = st.columns(2)

                with col1:
                    st.metric("Statistique ADF", f"{adf_result[0]:.4f}")
                    st.metric("p-value", f"{adf_result[1]:.4f}")

                with col2:
                    if adf_result[1] < 0.05:
                        st.success("‚úÖ S√©rie STATIONNAIRE")
                        suggested_d = 0
                    else:
                        st.warning("‚ö†Ô∏è S√©rie NON-STATIONNAIRE")
                        suggested_d = 1

                # ACF et PACF
                st.markdown("#### üìä ACF et PACF")

                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
                plt.suptitle(f'ACF/PACF de la s√©rie (diff√©renci√©e {suggested_d} fois)', size=16)

                # S√©rie diff√©renci√©e si n√©cessaire
                if suggested_d > 0:
                    series_diff = series_data.diff().dropna()
                else:
                    series_diff = series_data

                plot_acf(series_diff, lags=min(40, len(series_diff) // 2 - 1), ax=ax1)
                plot_pacf(series_diff, lags=min(40, len(series_diff) // 2 - 1), ax=ax2)

                st.pyplot(fig)

                # Suggestion de mod√®le
                st.markdown("#### üéØ Suggestion de Mod√®le")

                st.info(f"""
                **Analyse automatique:**
                - Ordre de diff√©renciation sugg√©r√©: **d = {suggested_d}**
                - Examinez l'ACF et PACF ci-dessus pour identifier p et q.
                """)

                # Estimation du mod√®le
                st.markdown("#### üìä Estimation du Mod√®le ARIMA")

                col1, col2, col3 = st.columns(3)

                with col1:
                    order_p = st.number_input("p", 0, 5, 1, key='final_p')
                with col2:
                    order_d = st.number_input("d", 0, 2, suggested_d, key='final_d')
                with col3:
                    order_q = st.number_input("q", 0, 5, 1, key='final_q')

                if st.button("üöÄ Estimer le Mod√®le"):
                    with st.spinner("Estimation en cours..."):
                        try:
                            # Ajuster le mod√®le
                            model = ARIMA(series_data, order=(order_p, order_d, order_q))
                            fitted_model = model.fit()

                            # R√©sum√©
                            st.markdown("##### üìã R√©sum√© du Mod√®le")
                            st.text(fitted_model.summary())

                            # Diagnostic des r√©sidus
                            st.markdown("##### üîç Diagnostic des R√©sidus")

                            fig = fitted_model.plot_diagnostics(figsize=(12, 8))
                            st.pyplot(fig)

                            # Test de Ljung-Box
                            lb_test = acorr_ljungbox(fitted_model.resid, lags=10, return_df=True)

                            st.markdown("##### üìä Test de Ljung-Box")
                            st.dataframe(lb_test)

                            if (lb_test['lb_pvalue'] > 0.05).all():
                                st.success("‚úÖ Les r√©sidus sont un bruit blanc (p-values > 0.05)")
                            else:
                                st.warning("‚ö†Ô∏è Autocorr√©lation r√©siduelle d√©tect√©e")

                            # Pr√©vision
                            st.markdown("##### üîÆ Pr√©visions")

                            n_forecast = st.slider("Nombre de p√©riodes √† pr√©voir", 1, 50, 10)

                            forecast_obj = fitted_model.get_forecast(steps=n_forecast)
                            forecast = forecast_obj.predicted_mean
                            conf_int = forecast_obj.conf_int()

                            fig_forecast = go.Figure()

                            # Donn√©es historiques
                            fig_forecast.add_trace(go.Scatter(
                                y=series_data,
                                mode='lines',
                                name='Donn√©es',
                                line=dict(color='blue')
                            ))

                            # Pr√©visions
                            forecast_index = pd.RangeIndex(start=len(series_data), stop=len(series_data) + n_forecast)
                            fig_forecast.add_trace(go.Scatter(
                                x=forecast_index,
                                y=forecast,
                                mode='lines',
                                name='Pr√©visions',
                                line=dict(color='red', dash='dash')
                            ))

                            # Intervalle de confiance
                            fig_forecast.add_trace(go.Scatter(
                                x=pd.concat([pd.Series(forecast_index), pd.Series(forecast_index[::-1])]),
                                y=pd.concat([conf_int.iloc[:, 1], conf_int.iloc[:, 0][::-1]]),
                                fill='toself',
                                fillcolor='rgba(255,0,0,0.2)',
                                line=dict(color='rgba(255,255,255,0)'),
                                name='IC 95%'
                            ))

                            fig_forecast.update_layout(
                                title='S√©rie et Pr√©visions',
                                xaxis_title='Temps',
                                yaxis_title='Valeur',
                                height=500
                            )
                            st.plotly_chart(fig_forecast, use_container_width=True)

                            # Valeurs de pr√©vision
                            st.markdown("**Valeurs Pr√©vues:**")
                            forecast_df = pd.DataFrame({
                                'P√©riode': forecast_index,
                                'Pr√©vision': forecast
                            })
                            st.dataframe(forecast_df)

                        except Exception as e:
                            st.error(f"Erreur lors de l'estimation: {str(e)}")

        with tab5:
            st.markdown("### üìä Exemples d'Application R√©els")

            example_type = st.selectbox(
                "Choisissez un domaine d'application:",
                ["Finance - Prix d'Actions",
                 "√âconomie - Taux de Ch√¥mage",
                 "M√©t√©o - Temp√©ratures",
                 "Ventes - Donn√©es Commerciales"]
            )

            if example_type == "Finance - Prix d'Actions":
                st.markdown("""
                <div class="info-box">
                <h4>üíπ Mod√©lisation des Prix d'Actions</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("""
                **Caract√©ristiques typiques:**
                - S√©rie **non-stationnaire** (tendance stochastique)
                - Variance souvent non-constante (h√©t√©rosc√©dasticit√©)
                - Mod√®le typique: **ARIMA(1,1,1)** ou **ARIMA(2,1,2)**
                """)

                st.markdown("**Mod√®le commun:**")
                st.latex(r"""
                \text{Log}(P_t) - \text{Log}(P_{t-1}) = r_t \sim ARMA(p,q)
                """)

                st.markdown("**Exemple:**")
                st.code("""
# Simulation prix d'action
np.random.seed(42)
returns = np.random.normal(0.001, 0.02, 252)  # Rendements journaliers
prices = 100 * np.exp(np.cumsum(returns))  # Prix

# Mod√®le sur rendements logarithmiques
log_returns = np.diff(np.log(prices))

# ARIMA(1,1,1) sur prix ou ARMA(1,1) sur rendements
model = ARIMA(prices, order=(1,1,1))
""", language='python')

            elif example_type == "√âconomie - Taux de Ch√¥mage":
                st.markdown("""
                <div class="info-box">
                <h4>üìâ Mod√©lisation du Taux de Ch√¥mage</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("""
                **Caract√©ristiques typiques:**
                - Persistance forte (autocorr√©lation)
                - Saisonnalit√© possible
                - Mod√®le typique: **ARIMA(2,1,0)** ou **SARIMA**
                """)

                st.markdown("**Approche:**")
                st.markdown("""
                1. Test ADF ‚Üí g√©n√©ralement I(1)
                2. Diff√©renciation: Œî(Taux)
                3. AR(2) souvent suffisant pour la partie stationnaire
                """)

            elif example_type == "M√©t√©o - Temp√©ratures":
                st.markdown("""
                <div class="info-box">
                <h4>üå°Ô∏è Mod√©lisation des Temp√©ratures</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("""
                **Caract√©ristiques typiques:**
                - **Forte saisonnalit√©** (annuelle)
                - Tendance long-terme possible (r√©chauffement)
                - Mod√®le typique: **SARIMA(1,0,1)(1,1,1)‚ÇÅ‚ÇÇ**
                """)

                st.markdown("**Mod√®le saisonnier:**")
                st.latex(r"""
                \phi(L)\Phi(L^{12})(1-L^{12})X_t = \theta(L)\Theta(L^{12})\varepsilon_t
                """)

            else:  # Ventes
                st.markdown("""
                <div class="info-box">
                <h4>üõí Mod√©lisation des Ventes</h4>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("""
                **Caract√©ristiques typiques:**
                - Tendance croissante
                - Saisonnalit√© (mensuelle, trimestrielle)
                - √âv√©nements sp√©ciaux (promotions, f√™tes)
                - Mod√®le typique: **SARIMA(1,1,1)(0,1,1)‚ÇÅ‚ÇÇ**
                """)

                st.markdown("**Pr√©traitement:**")
                st.markdown("""
                1. Transformation log pour stabiliser la variance
                2. Diff√©renciation saisonni√®re
                3. Diff√©renciation simple si n√©cessaire
                4. Mod√®le ARMA sur la s√©rie transform√©e
                """)

                st.code("""
# Exemple ventes mensuelles
# sales = pd.read_csv('sales.csv', parse_dates=['date'], index_col='date')

# Transformation log
# log_sales = np.log(sales)

# Mod√®le SARIMA
# model = SARIMAX(log_sales,
#                 order=(1,1,1),           # (p,d,q)
#                 seasonal_order=(0,1,1,12)) # (P,D,Q,s)

# fitted = model.fit()
# forecast = fitted.forecast(steps=12)

# Retransformation
# forecast_original = np.exp(forecast)
""", language='python')

            st.markdown("---")
            st.markdown("### üìã R√©sum√© des Bonnes Pratiques")

            st.markdown("""
            <div class="success-box">
            <h4>‚úÖ Checklist ARIMA</h4>
            <ol>
                <li>üìä <strong>Visualiser</strong> la s√©rie (tendance, saisonnalit√©)</li>
                <li>üîç <strong>Tester</strong> la stationnarit√© (ADF)</li>
                <li>üîÑ <strong>Diff√©rencier</strong> si n√©cessaire</li>
                <li>üìà <strong>Analyser</strong> ACF/PACF</li>
                <li>üéØ <strong>Identifier</strong> p et q</li>
                <li>üíª <strong>Estimer</strong> plusieurs mod√®les</li>
                <li>üìä <strong>Comparer</strong> AIC/BIC</li>
                <li>‚úÖ <strong>Valider</strong> r√©sidus</li>
                <li>üîÆ <strong>Pr√©voir</strong> et √©valuer</li>
            </ol>
            </div>
            """, unsafe_allow_html=True)